{"version":3,"sources":["js_variables.js","lang_mappings.js","html_holders.js","accessibility.js","GMap.js"],"names":["__id","id","document","getElementById","__class","classs","getElementsByClassName","_myStorage","window","localStorage","_isMobile","_getScriptParams","params","mapScripts","getElementsByTagName","map","param","ss","getAttribute","filter","Boolean","test","navigator","userAgent","substr","collapseBtn1","onclick","classList","toggle","collapseBtn2","_styles","default","hide","featureType","stylers","visibility","elementType","night","color","pSBC","p","c0","c1","l","r","g","b","P","f","t","h","i","parseInt","m","Math","round","a","this","pSBCr","d","n","length","x","split","slice","parseFloat","toString","undefined","cardsColors","_styleItDark","documentElement","style","backgroundColor","setOptions","styles","src","Array","from","card","forEach","_styleItWhite","idx","_showLoading","add","_hideLoading","remove","_setWithExpiry","key","value","now","Date","item","expiry","day","getDay","month","getMonth","year","getFullYear","setItem","JSON","stringify","_getWithExpiry","itemStr","getItem","parse","removeItem","addEventListener","checked","body","backgroundImage","_autocompleteOptions","types","minMax","querySelectorAll","firstElementChild","className","indexOf","children","replace","th","innerHTML","allowDrop","ev","preventDefault","drag","dataTransfer","setData","target","generateCard","cardId","toBe","cloneNode","title","charAt","toUpperCase","join","setAttribute","childNodes","insertAdjacentHTML","button","createElement","shareIt","appendChild","drop","getData","autoDrag","autodrag_id","location","emptyIt","elements","prototype","call","node","parentNode","removeChild","card_id","dd","domtoimage","toBlob","width","clientWidth","height","clientHeight","bgcolor","tagName","transform","transformOrigin","then","blob","file","File","type","data","text","files","canShare","share","console","log","_weekdaysLangs","language","Error","_aqiLangs","1","2","3","4","5","_picturesLangs","success","fail","place","fetch","removeFromStorage","storage","cacheKey","cacheResponse","hourstl","response","cres","clone","dataType","headers","get","toLowerCase","e","self","url","settings","ttl","TypeError","getStorage","localCache","cacheTTL","Content-type","genCacheKey","cacheValid","isCacheValid","Response","status","statusText","Content-Type","Promise","resolve","reject","provideResponse","bind","AqiCard","[object Object]","aqi","today","co","no","no2","aqiInterpretation","setUTCSeconds","ISODate","toISOString","dayName","coo","trim","TemperatureCard","period","maxTemp","minTemp","currentMarked","dt","iconSrc","weather","icon","maxTempF","temp","max","minTempF","min","s","description","sunrise","toLocaleTimeString","sunset","humidity","pressure","wind_speed","hueMax","normalize","range","stepMin","stepMax","step","showClass","collapseIcon","autoDragBtn","getCurrentMarkedId","getHueColors","getColorScaleHeads","_adsHolder","company","__currentSpokenCity","paragraph","__currentSpokenForecast","searchPlace","autocompleteService","google","maps","places","AutocompleteService","placesService","PlacesService","getPlacePredictions","input","predictions","PlacesServiceStatus","OK","speak","terms","getDetails","placeId","place_id","placeResults","nearbyRequest","setTimeout","synth","SpeechRecognition","recognition","speaking","error","SpeechSynthesisUtterance","lang","onend","event","onerror","_fireAccessFunctions","first","justRefresh","speechSynthesis","webkitSpeechRecognition","continuous","interimResults","maxAlternatives","onkeyup","start","cancel","onresult","city","results","transcript","confidence","onspeechend","stop","onnomatch","_initAccessibility","choiceViaLS","toDateString","CurrentList","isFeatures","isWeather","isValid","currentList","pollution","features","properties","name","dailies","daily","coordinates","geometry","autocomplete","heatmap","heatMapData","currObj","markers","directions","start_location","end_location","last","getTime","center","lat","lng","refreshCenter","initMap","trigger","Map","zoom","rotateControl","mapTypeControl","streetViewControl","configUIControls","addGeoJson","clearMarkers","getMarkers","showMarkers","setStyle","strokeColor","bounds","LatLngBounds","feature","getGeometry","forEachLatLng","latlng","extend","fitBounds","setCenter","setZoom","showAlertsList","populateHeatMap","infowindow","InfoWindow","infowindowContent","infowindowContentPrime","setContent","marker","Marker","animation","Animation","DROP","latestClicked","addListener","close","open","getAnimation","setAnimation","marker_","BOUNCE","cityWeather","cityName","cityPollution","renderForecastDays","renderPollution","configURLsControls","getPlace","viewport","setPlace","setVisible","namedItem","textContent","formatted_address","getPicture","handleLocationError","browserHasGeolocation","infoWindow","pos","setPosition","addDomListener","slider","sliderForm","moving","controls","ControlPosition","TOP_LEFT","clear","push","oninput","$","html","div","placeholder","Autocomplete","TOP_CENTER","bindTo","setFields","locationButton","TOP_RIGHT","geolocation","getCurrentPosition","position","coords","latitude","longitude","nearbyTriggeredRequest","getCenter","newDest","controlUI","setIcon","link","linkText","createTextNode","href","cssText","BOTTOM_CENTER","requestObject","cityname","json","cityNames","elem","alerts","alert","panel","contains","insertBefore","BOTTOM_LEFT","lastChild","display","alertContent","getScale","floor","temps","tempsMax","tempsMin","LatLng","lon","weight","MVCArray","set","visualization","HeatmapLayer","radius","opacity","setMap","lastIcon","sort","second","weekdayNames","reverse","toPrecision","Number","chain","list","main","components","COLORS","getColor","getType","todayTemp","setMapOnAll","cache","photos","names","service","request","query","called","nearbySearch","getUrl","to","prec","A","abs","String","toFixed","centerLocation"],"mappings":"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","file":"all-861d0c141d.js","sourcesContent":["/* eslint-disable no-unused-vars */\r\n\r\n// js_variables ==> GMap\r\n// _myStorage, _styles, _autocompleteOptions\r\n// _styleItDark(), _styleItWhite(), _showLoading(), _hideLoading(),\r\n// _setWithExpiry(), _getWithExpiry(), _fireAccessFunctions()\r\n\r\nfunction __id (id) { return document.getElementById(id) }\r\nfunction __class (classs) { return document.getElementsByClassName(classs) }\r\n\r\nconst _myStorage = window.localStorage\r\n\r\nlet _isMobile = false\r\n// device detection\r\nif (/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent) ||\r\n    /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(navigator.userAgent.substr(0, 4))) {\r\n  _isMobile = true\r\n}\r\n\r\nfunction _getScriptParams (params) {\r\n  const mapScripts = document.getElementsByTagName('script')\r\n  return params.map(param => {\r\n    return [...mapScripts].map(ss => { return ss.getAttribute(param) }).filter(Boolean)[0]\r\n  })\r\n}\r\n\r\nlet collapseBtn1 = __id('collapse1')\r\ncollapseBtn1.onclick = function () { collapseBtn1.classList.toggle('active') }\r\nlet collapseBtn2 = __id('collapse2')\r\ncollapseBtn2.onclick = function () { collapseBtn2.classList.toggle('active') }\r\n\r\n// less styling, setting business positions off and transit off\r\nconst _styles = {\r\n  default: [],\r\n  hide: [\r\n    {\r\n      featureType: 'poi.business',\r\n      stylers: [{ visibility: 'off' }]\r\n    },\r\n    {\r\n      featureType: 'transit',\r\n      elementType: 'labels.icon',\r\n      stylers: [{ visibility: 'off' }]\r\n    },\r\n    {\r\n      featureType: 'poi',\r\n      elementType: 'labels',\r\n      stylers: [\r\n        { visibility: 'off' }\r\n      ]\r\n    }\r\n  ],\r\n  night: [\r\n    { elementType: 'geometry', stylers: [{ color: '#242f3e' }] },\r\n    { elementType: 'labels.text.stroke', stylers: [{ color: '#242f3e' }] },\r\n    { elementType: 'labels.text.fill', stylers: [{ color: '#746855' }] },\r\n    {\r\n      featureType: 'administrative.locality',\r\n      elementType: 'labels.text.fill',\r\n      stylers: [{ color: '#d59563' }]\r\n    },\r\n    {\r\n      featureType: 'poi',\r\n      elementType: 'labels.text.fill',\r\n      stylers: [{ color: '#d59563' }]\r\n    },\r\n    {\r\n      featureType: 'poi.park',\r\n      elementType: 'geometry',\r\n      stylers: [{ color: '#263c3f' }]\r\n    },\r\n    {\r\n      featureType: 'poi.park',\r\n      elementType: 'labels.text.fill',\r\n      stylers: [{ color: '#6b9a76' }]\r\n    },\r\n    {\r\n      featureType: 'road',\r\n      elementType: 'geometry',\r\n      stylers: [{ color: '#38414e' }]\r\n    },\r\n    {\r\n      featureType: 'road',\r\n      elementType: 'geometry.stroke',\r\n      stylers: [{ color: '#212a37' }]\r\n    },\r\n    {\r\n      featureType: 'road',\r\n      elementType: 'labels.text.fill',\r\n      stylers: [{ color: '#9ca5b3' }]\r\n    },\r\n    {\r\n      featureType: 'road.highway',\r\n      elementType: 'geometry',\r\n      stylers: [{ color: '#746855' }]\r\n    },\r\n    {\r\n      featureType: 'road.highway',\r\n      elementType: 'geometry.stroke',\r\n      stylers: [{ color: '#1f2835' }]\r\n    },\r\n    {\r\n      featureType: 'road.highway',\r\n      elementType: 'labels.text.fill',\r\n      stylers: [{ color: '#f3d19c' }]\r\n    },\r\n    {\r\n      featureType: 'transit',\r\n      elementType: 'geometry',\r\n      stylers: [{ color: '#2f3948' }]\r\n    },\r\n    {\r\n      featureType: 'transit.station',\r\n      elementType: 'labels.text.fill',\r\n      stylers: [{ color: '#d59563' }]\r\n    },\r\n    {\r\n      featureType: 'water',\r\n      elementType: 'geometry',\r\n      stylers: [{ color: '#17263c' }]\r\n    },\r\n    {\r\n      featureType: 'water',\r\n      elementType: 'labels.text.fill',\r\n      stylers: [{ color: '#515c6d' }]\r\n    },\r\n    {\r\n      featureType: 'water',\r\n      elementType: 'labels.text.stroke',\r\n      stylers: [{ color: '#17263c' }]\r\n    },\r\n    {\r\n      featureType: 'poi.business',\r\n      stylers: [{ visibility: 'off' }]\r\n    },\r\n    {\r\n      featureType: 'transit',\r\n      elementType: 'labels.icon',\r\n      stylers: [{ visibility: 'off' }]\r\n    }\r\n  ]\r\n}\r\n// Copyright of PimpTrizkit taken from https://github.com/PimpTrizkit/PJs/wiki/12.-Shade,-Blend-and-Convert-a-Web-Color-(pSBC.js)\r\n// Version 4.0\r\nconst pSBC = (p, c0, c1, l) => {\r\n  let r, g, b, P, f, t, h, i = parseInt, m = Math.round, a = typeof (c1) == 'string'\r\n  if (typeof (p) != 'number' || p < -1 || p > 1 || typeof (c0) != 'string' || (c0[0] != 'r' && c0[0] != '#') || (c1 && !a)) return null\r\n  if (!this.pSBCr) this.pSBCr = (d) => {\r\n    let n = d.length, x = {}\r\n    if (n > 9) {\r\n      [r, g, b, a] = d = d.split(','), n = d.length\r\n      if (n < 3 || n > 4) return null\r\n      x.r = i(r[3] == 'a' ? r.slice(5) : r.slice(4)), x.g = i(g), x.b = i(b), x.a = a ? parseFloat(a) : -1\r\n    } else {\r\n      if (n == 8 || n == 6 || n < 4) return null\r\n      if (n < 6) d = '#' + d[1] + d[1] + d[2] + d[2] + d[3] + d[3] + (n > 4 ? d[4] + d[4] : '')\r\n      d = i(d.slice(1), 16)\r\n      if (n == 9 || n == 5) x.r = d >> 24 & 255, x.g = d >> 16 & 255, x.b = d >> 8 & 255, x.a = m((d & 255) / 0.255) / 1000\r\n      else x.r = d >> 16, x.g = d >> 8 & 255, x.b = d & 255, x.a = -1\r\n    } return x\r\n  }\r\n  h = c0.length > 9, h = a ? c1.length > 9 ? true : c1 == 'c' ? !h : false : h, f = this.pSBCr(c0), P = p < 0, t = c1 && c1 != 'c' ? this.pSBCr(c1) : P ? { r: 0, g: 0, b: 0, a: -1 } : { r: 255, g: 255, b: 255, a: -1 }, p = P ? p * -1 : p, P = 1 - p\r\n  if (!f || !t) return null\r\n  if (l) r = m(P * f.r + p * t.r), g = m(P * f.g + p * t.g), b = m(P * f.b + p * t.b)\r\n  else r = m((P * f.r ** 2 + p * t.r ** 2) ** 0.5), g = m((P * f.g ** 2 + p * t.g ** 2) ** 0.5), b = m((P * f.b ** 2 + p * t.b ** 2) ** 0.5)\r\n  a = f.a, t = t.a, f = a >= 0 || t >= 0, a = f ? a < 0 ? t : t < 0 ? a : a * P + t * p : 0\r\n  if (h) return 'rgb' + (f ? 'a(' : '(') + r + ',' + g + ',' + b + (f ? ',' + m(a * 1000) / 1000 : '') + ')'\r\n  else return '#' + (4294967296 + r * 16777216 + g * 65536 + b * 256 + (f ? m(a * 255) : 0)).toString(16).slice(1, f ? undefined : -2)\r\n}\r\nvar cardsColors\r\n\r\nfunction _styleItDark () {\r\n  document.documentElement.style.backgroundColor = '#111'\r\n  map.setOptions({ styles: _styles.night })\r\n  __id('copyright_google').src = './copyright/powered_by_google_on_non_white_hdpi.png'\r\n  if (!cardsColors) {\r\n    cardsColors = Array.from(__class('card')).map(card => { return card.style.backgroundColor })\r\n    cardsColors = [...cardsColors]\r\n  }\r\n\r\n  Array.from(__class('card')).forEach(card => {\r\n    card.style.backgroundColor = pSBC(-0.2, card.style.backgroundColor)\r\n  })\r\n\r\n  __id('logo').src = './img/weather_venue_856-8_on_black.png'\r\n}\r\n\r\nfunction _styleItWhite () {\r\n  document.documentElement.style.backgroundColor = '#eee'\r\n  map.setOptions({ styles: _styles.hide })\r\n  __id('copyright_google').src = './copyright/powered_by_google_on_white_hdpi.png'\r\n  if (cardsColors) {\r\n    Array.from(__class('card')).forEach(function (card, idx) {\r\n      card.style.backgroundColor = cardsColors[idx]\r\n    })\r\n  }\r\n  __id('logo').src = './img/weather_venue_856-8.png'\r\n}\r\n\r\nfunction _showLoading () {\r\n  __id('spinner-back').classList.add('show')\r\n  __id('spinner-front').classList.add('show')\r\n}\r\n\r\nfunction _hideLoading () {\r\n  __id('spinner-back').classList.remove('show')\r\n  __id('spinner-front').classList.remove('show')\r\n}\r\n\r\nfunction _setWithExpiry (key, value) {\r\n  const now = new Date()\r\n  const day = { day: now.getDay(), month: now.getMonth(), year: now.getFullYear() }\r\n\r\n  // `item` is an object which contains the original value\r\n  // as well as today's date\r\n  const item = {\r\n    value: value,\r\n    expiry: day\r\n  }\r\n  _myStorage.setItem(key, JSON.stringify(item))\r\n}\r\n\r\nfunction _getWithExpiry (key) {\r\n  const itemStr = _myStorage.getItem(key)\r\n  // if the item doesn't exist, return null\r\n  if (!itemStr) {\r\n    return null\r\n  }\r\n  const item = JSON.parse(itemStr)\r\n  const now = new Date()\r\n\r\n  // compare the expiry time of the item with the current time\r\n  if (now.getDay() !== item.expiry.day || now.getMonth() !== item.expiry.month || now.getFullYear() !== item.expiry.year) {\r\n    // If the item generated today, delete the item from storage\r\n    // and return null\r\n    _myStorage.removeItem(key)\r\n    return null\r\n  }\r\n  return item.value\r\n}\r\n\r\n__id('themeSwitch').addEventListener('click', function () {\r\n  const isChecked = __id('themeSwitch').checked\r\n  const value = isChecked ? 1 : 0\r\n  value ? localStorage.setItem('themeSwitch', 'true') : localStorage.removeItem('themeSwitch')\r\n  if (!value) {\r\n    document.body.style.backgroundImage = ''\r\n    document.documentElement.style.backgroundImage = ''\r\n  }\r\n})\r\n\r\nconst _autocompleteOptions = {\r\n  types: ['(cities)']\r\n  // componentRestrictions: {country: \"us\"}\r\n}\r\n\r\n// Toggle cards background color between minimum and maximum hue colors\r\nfunction minMax () {\r\n  const cards = Array.from(document.querySelectorAll('[id^=\"checkIdcity\"]')).map(a => { return a.firstElementChild }).filter(a => { return a.className === 'card'}).slice(0, 8)\r\n  cards.forEach(card => {\r\n    const style = card.style.backgroundImage\r\n    if (style.indexOf('40%') > -1) {\r\n      __id('minmax').children[0].style = 'color:blue'\r\n      __id('minmax').children[1].style = 'color:black'\r\n      card.style.backgroundImage = style.replace('40%', '100%').replace('40%', '100%')\r\n      Array.from(document.body.getElementsByTagName('th')).slice(0, 176).forEach(th => {\r\n        th.innerHTML = th.innerHTML.replace('ᐁ', '▼')\r\n        th.innerHTML = th.innerHTML.replace('▲', 'ᐃ')\r\n      })\r\n      return\r\n    }\r\n    if (style.indexOf('0.01%') > -1) {\r\n      __id('minmax').children[0].style = 'color:black'\r\n      __id('minmax').children[1].style = 'color:black'\r\n      card.style.backgroundImage = style.replace('0.01%', '40%').replace('0.01%', '40%')\r\n      Array.from(document.body.getElementsByTagName('th')).slice(0, 176).forEach(th => {\r\n        th.innerHTML = th.innerHTML.replace('▼', 'ᐁ')\r\n        th.innerHTML = th.innerHTML.replace('▲', 'ᐃ')\r\n      })\r\n      return\r\n    }\r\n    if (style.indexOf('100%') > -1) {\r\n      __id('minmax').children[0].style = 'color:black'\r\n      __id('minmax').children[1].style = 'color:red'\r\n      card.style.backgroundImage = style.replace('100%', '0.01%').replace('100%', '0.01%')\r\n      Array.from(document.body.getElementsByTagName('th')).slice(0, 176).forEach(th => {\r\n        th.innerHTML = th.innerHTML.replace('▼', 'ᐁ')\r\n        th.innerHTML = th.innerHTML.replace('ᐃ', '▲')\r\n      })\r\n    }\r\n  })\r\n}\r\n\r\n// Comparision\r\nfunction allowDrop (ev) {\r\n  ev.preventDefault()\r\n}\r\n\r\nfunction drag (ev) {\r\n  ev.dataTransfer.setData('text', ev.target.id)\r\n}\r\n\r\nfunction generateCard (cardId) {\r\n  const toBe = __id(cardId).cloneNode(true)\r\n  const title = `<h3>${cardId.split('-').slice(1, -1).map(a => { return a.charAt(0).toUpperCase() + a.slice(1) }).join('-')}</h3>`\r\n  toBe.setAttribute('id', cardId + '_clone')\r\n  toBe.setAttribute('draggable', false)\r\n  // toBe.style.cursor =''\r\n  toBe.childNodes[1].firstElementChild.setAttribute('href', '')\r\n  toBe.insertAdjacentHTML('afterbegin', title)\r\n  if (_isMobile) {\r\n    const button = document.createElement('button')\r\n    button.innerHTML = '<i class=\"bi bi-share\"></i>'\r\n    button.classList.add('btn-sm')\r\n    button.classList.add('btn-light')\r\n    button.onclick = function () {\r\n      shareIt(cardId + '_clone')\r\n      return false\r\n    }\r\n    toBe.appendChild(button)\r\n  }\r\n  return toBe\r\n}\r\n\r\nfunction drop (ev) {\r\n  ev.preventDefault()\r\n  const data = ev.dataTransfer.getData('text')\r\n  const toBe = generateCard(data)\r\n  ev.target.appendChild(toBe)\r\n}\r\n\r\nfunction autoDrag (autodrag_id) {\r\n  __id(autodrag_id).remove()\r\n  const data = autodrag_id.slice(0, -9)\r\n  const toBe = generateCard(data)\r\n  toBe.childNodes[4].remove()\r\n  __id('comparision-items').appendChild(toBe)\r\n  window.location = '#comparision-items'\r\n}\r\n\r\nfunction emptyIt() {\r\n  const elements = document.querySelectorAll('[id*=\"_clone\"]')\r\n  Array.prototype.forEach.call(elements, function(node) {\r\n    node.parentNode.removeChild(node)\r\n  })\r\n}\r\n\r\nfunction shareIt(card_id) {\r\n  const dd = __id(card_id)\r\n  // dd.style.backgroundColor =\"white\"\r\n  const scale = 2\r\n  // dd.childNodes[4].remove()\r\n  domtoimage.toBlob(dd, {\r\n    width: dd.clientWidth * scale,\r\n    height: dd.clientHeight * scale,\r\n    bgcolor: 'white',\r\n    filter: function (node) { return (node.tagName !== 'BUTTON') },\r\n    style: {\r\n      transform: 'scale(' + scale + ')',\r\n      transformOrigin: 'top left'\r\n    }\r\n  }).then(function (blob) {\r\n    const file = new File([blob], 'WeatherVenue.png', { type: blob.type })\r\n    const data = {\r\n      title: 'WeatherVenue.com',\r\n      text: `Weather in ${card_id.split('_')[0].split('-')[1]}`,\r\n      files: [file]\r\n    }\r\n    if(navigator.canShare && navigator.canShare(data)) {\r\n      navigator.share(data)\r\n    } else {\r\n      console.log('cannot share ')\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Copyright (c) Christopher Keefer, 2016.\r\n * https://github.com/SaneMethod/fetchCache\r\n *\r\n * Override fetch in the global context to allow us to cache the response to fetch in a Storage interface\r\n * implementing object (such as localStorage).\r\n */\r\n(function (fetch) {\r\n  /* If the context doesn't support fetch, we won't attempt to patch in our\r\n   caching using fetch, for obvious reasons. */\r\n  if (!fetch) return\r\n\r\n  /**\r\n   * Generate the cache key under which to store the local data - either the cache key supplied,\r\n   * or one generated from the url, the Content-type header (if specified) and the body (if specified).\r\n   *\r\n   * @returns {string}\r\n   */\r\n  function genCacheKey(url, settings) {\r\n    var {headers:{'Content-type': type}} = ('headers' in settings) ? settings : {headers: {}},\r\n      {body} = settings\r\n\r\n    return settings.cacheKey || url + (type || '') + (body || '')\r\n  }\r\n\r\n  /**\r\n   * Determine whether we're using localStorage or, if the user has specified something other than a boolean\r\n   * value for options.localCache, whether the value appears to satisfy the plugin's requirements.\r\n   * Otherwise, throw a new TypeError indicating what type of value we expect.\r\n   *\r\n   * @param {boolean|object} storage\r\n   * @returns {boolean|object}\r\n   */\r\n  function getStorage(storage) {\r\n    if (!storage) return false\r\n    if (storage === true) return self.localStorage\r\n    if (typeof storage === 'object' && 'getItem' in storage &&\r\n          'removeItem' in storage && 'setItem' in storage) {\r\n      return storage\r\n    }\r\n    throw new TypeError('localCache must either be a boolean value, ' +\r\n          'or an object which implements the Storage interface.')\r\n  }\r\n\r\n  /**\r\n   * Remove the item specified by cacheKey and its attendant meta items from storage.\r\n   *\r\n   * @param {Storage|object} storage\r\n   * @param {string} cacheKey\r\n   */\r\n  function removeFromStorage(storage, cacheKey) {\r\n    storage.removeItem(cacheKey)\r\n    storage.removeItem(cacheKey + 'cachettl')\r\n    storage.removeItem(cacheKey + 'dataType')\r\n  }\r\n\r\n  /**\r\n   * Cache the response into our storage object.\r\n   * We clone the response so that we can drain the stream without making it\r\n   * unavailable to future handlers.\r\n   *\r\n   * @param {string} cacheKey Key under which to cache the data string. Bound in\r\n   * fetch override.\r\n   * @param {Storage} storage Object implementing Storage interface to store cached data\r\n   * (text or json exclusively) in. Bound in fetch override.\r\n   * @param {Number} hourstl Number of hours this value shoud remain in the cache.\r\n   * Bound in fetch override.\r\n   * @param {Response} response\r\n   */\r\n  function cacheResponse(cacheKey, storage, hourstl, response) {\r\n    var cres = response.clone(),\r\n      dataType = (response.headers.get('Content-Type') || 'text/plain').toLowerCase()\r\n\r\n    cres.text().then((text) => {\r\n      try {\r\n        storage.setItem(cacheKey, text)\r\n        storage.setItem(cacheKey + 'cachettl', +new Date() + 1000 * 60 * 60 * hourstl)\r\n        storage.setItem(cacheKey + 'dataType', dataType)\r\n      } catch (e) {\r\n        // Remove any incomplete data that may have been saved before the exception was caught\r\n        removeFromStorage(storage, cacheKey)\r\n        console.log('Cache Error: ' + e, cacheKey, text)\r\n      }\r\n    })\r\n\r\n    return response\r\n  }\r\n\r\n  /**\r\n   * Create a new response containing the cached value, and return a promise\r\n   * that resolves with this response.\r\n   *\r\n   * @param value\r\n   * @param dataType\r\n   * @returns {Promise}\r\n   */\r\n  function provideResponse(value, dataType) {\r\n    var response = new Response(\r\n      value,\r\n      {\r\n        status: 200,\r\n        statusText: 'success',\r\n        headers: {\r\n          'Content-Type': dataType\r\n        }\r\n      }\r\n    )\r\n\r\n    return new Promise(function (resolve, reject) {\r\n      resolve(response)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Override fetch on the global context, so that we can intercept\r\n   * fetch calls and respond with locally cached content, if available.\r\n   * New parameters available on the call to fetch:\r\n   * localCache   : true // required - either a boolean (if true, localStorage is used,\r\n   * if false request is not cached or returned from cache), or an object implementing the\r\n   * Storage interface, in which case that object is used instead.\r\n   * cacheTTL     : 5, // optional, cache time in hours, default is 5. Use float numbers for\r\n   * values less than a full hour (e.g. 0.5 for 1/2 hour).\r\n   * cacheKey     : 'post', // optional - key under which cached string will be stored.\r\n   * isCacheValid : function  // optional - return true for valid, false for invalid.\r\n   */\r\n  self.fetch = function (url, settings) {\r\n    var storage = getStorage(settings.localCache),\r\n      hourstl = settings.cacheTTL || 5,\r\n      cacheKey = genCacheKey(url, settings),\r\n      cacheValid = settings.isCacheValid,\r\n      ttl,\r\n      value,\r\n      dataType\r\n\r\n    if (!storage) return fetch(url, settings)\r\n\r\n    ttl = storage.getItem(cacheKey + 'cachettl')\r\n\r\n    if (cacheValid && typeof cacheValid === 'function' && !cacheValid()) {\r\n      removeFromStorage(storage, cacheKey)\r\n      ttl = 0\r\n    }\r\n\r\n    if (ttl && ttl < +new Date()) {\r\n      removeFromStorage(storage, cacheKey)\r\n    }\r\n\r\n    value = storage.getItem(cacheKey)\r\n\r\n    if (!value) {\r\n      /* If not cached, we'll make the request and add a then block to the resulting promise,\r\n           in which we'll cache the result. */\r\n      return fetch(url, settings).then(cacheResponse.bind(null, cacheKey, storage, hourstl))\r\n    }\r\n\r\n    /* Value is cached, so we'll simply create and respond with a promise of our own,\r\n       and provide a response object. */\r\n    dataType = storage.getItem(cacheKey + 'dataType') || 'text/plain'\r\n    return provideResponse(value, dataType)\r\n  };\r\n})(self.fetch)\r\n","function _weekdaysLangs(language) {\r\n  switch (language) {\r\n    case 'en':\r\n      return [\r\n        'Sunday',\r\n        'Monday',\r\n        'Tuesday',\r\n        'Wednesday',\r\n        'Thursday',\r\n        'Friday',\r\n        'Saturday'\r\n      ]\r\n    case 'ar':\r\n      return [\r\n        'الأحد',\r\n        'الإثنين',\r\n        'الثلثاء',\r\n        'الأربعاء',\r\n        'الخميس',\r\n        'الجمعة',\r\n        'السبت'\r\n      ]\r\n    case 'fr':\r\n      return [\r\n        'Dimanche',\r\n        'Lundi',\r\n        'Mardi',\r\n        'Mercredi',\r\n        'Jeudi',\r\n        'Vendredi',\r\n        'Samedi'\r\n      ]\r\n    default:\r\n      throw new Error('Language mapping error in _weekdayNames with language=', language)\r\n  }\r\n}\r\n\r\nfunction _aqiLangs(language) {\r\n  switch (language) {\r\n    case 'en':\r\n      return {\r\n        1: 'Air quality: Good',\r\n        2: 'Air quality: Fair',\r\n        3: 'Air quality: Moderate',\r\n        4: 'Air quality: Poor',\r\n        5: 'Air quality: Very Poor'\r\n      }\r\n    case 'ar':\r\n      return {\r\n        1: 'جودة الهواء: جيدة',\r\n        2: 'جودة الهواء: مقبولة',\r\n        3: 'جودة الهواء: متوسطة',\r\n        4: 'جودة الهواء: ضعيفة',\r\n        5: 'جودة الهواء: ضعيفة جدا'\r\n      }\r\n    case 'fr':\r\n      return {\r\n        1: 'Qualité de l\\'air: bonne',\r\n        2: 'Qualité de l\\'air: passable',\r\n        3: 'Qualité de l\\'air: modérée',\r\n        4: 'Qualité de l\\'air: médiocre',\r\n        5: 'Qualité de l\\'air: très mauvaise'\r\n      }\r\n    default:\r\n      throw new Error('Language mapping error in _aqiInterpretation with language=', language)\r\n  }\r\n}\r\n\r\nfunction _picturesLangs(language) {\r\n  let success, fail\r\n  switch (language) {\r\n    case 'en':\r\n      success = (place) => `Local pictures of ${place}`\r\n      fail = (place) => `There are no pictures found for ${place}`\r\n      return [success, fail]\r\n    case 'ar':\r\n      success = (place) => `صور منطقة ${place}`\r\n      fail = (place) => `لا توجد صور لمنطقة ${place}`\r\n      return [success, fail]\r\n    case 'fr':\r\n      success = (place) => `Photos locales de ${place}`\r\n      fail = (place) => `Il n'y a pas de photos trouvées pour ${place}`\r\n      return [success, fail]\r\n    default:\r\n      throw new Error('Language mapping error in _picturesLangs with language=', language)\r\n  }\r\n}\r\n","class AqiCard {\r\n  constructor (language, aqi, today, co, no, no2) {\r\n    const theme = {\r\n      1: '#4C5273',\r\n      2: '#F2E96B',\r\n      3: '#F2CA50',\r\n      4: '#F2A03D',\r\n      5: '#A67041'\r\n    }\r\n    this.style = 'background-color: ' + theme[aqi]\r\n    this.aqiInterpretation = _aqiLangs(language)\r\n    this.aqi = aqi\r\n    const d = new Date(0)\r\n    d.setUTCSeconds(today)\r\n    this.ISODate = d.toISOString().slice(5, 10)\r\n    this.dayName = _weekdaysLangs(language)[d.getDay()]\r\n    this.co = co\r\n    this.no = no\r\n    this.no2 = no2\r\n  }\r\n\r\n  html () {\r\n    let coo = 1\r\n    const showClass = _isMobile ? '' : 'show'\r\n    const collapseIcon = '<i class=\"bi bi-arrows-collapse\"></i>'\r\n    return (`\r\n        <div class=\"col-md-3\" style=\"margin-top:20px;\">\r\n            <div class=\"card\" style=\"${this.style}\">\r\n                <h4 class=\"card-title text-center\" data-toggle=\"collapse\" href=\"#collapseId20\" role=\"button\" aria-expanded=\"false\">${collapseIcon}${this.aqiInterpretation[this.aqi]}</h4>\r\n                <table style=\"width:100%\">\r\n                    <tr>\r\n                        <th style= 'background-color: #4C5273; font-size: xx-small'>${this.aqiInterpretation[coo++].split(':')[1].trim()}</th>\r\n                        <th style= 'background-color: #F2E96B; font-size: xx-small'>${this.aqiInterpretation[coo++].split(':')[1].trim()}</th>\r\n                        <th style= 'background-color: #F2CA50; font-size: xx-small'>${this.aqiInterpretation[coo++].split(':')[1].trim()}</th>\r\n                        <th style= 'background-color: #F2A03D; font-size: xx-small'>${this.aqiInterpretation[coo++].split(':')[1].trim()}</th>\r\n                        <th style= 'background-color: #A67041; font-size: xx-small'>${this.aqiInterpretation[coo++].split(':')[1].trim()}</th>\r\n                    </tr>\r\n                </table>\r\n                <div class=\"card-body\">\r\n                    <div class=\"collapse\" id=\"collapseId20\">\r\n                        <h5 class=\"card-title text-center\">${this.dayName}\\n${this.ISODate}</h5>\r\n                        <p class=\"card-text text-center\">CO: ${this.co} <br />NO: ${this.no}<br />NO2: ${this.no2}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    `)\r\n  }\r\n}\r\n\r\nclass TemperatureCard {\r\n  constructor (language, period, maxTemp, minTemp, currentMarked, co) {\r\n    this.period = period\r\n    this.maxTemp = maxTemp\r\n    this.minTemp = minTemp\r\n    this.currentMarked = currentMarked\r\n    const d = new Date(0)\r\n    d.setUTCSeconds(period.dt)\r\n    this.ISODate = d.toISOString().slice(5, 10)\r\n    this.dayName = _weekdaysLangs(language)[d.getDay()]\r\n    this.iconSrc = `https://openweathermap.org/img/wn/${period.weather[0].icon || 'na'}@4x.png`\r\n    this.maxTempF = period.temp.max || 'N/A'\r\n    this.minTempF = period.temp.min || 'N/A'\r\n    const s = period.weather[0].description || 'N/A'\r\n    this.description = s.charAt(0).toUpperCase() + s.slice(1)\r\n    this.sunrise = new Date(period.sunrise * 1000).toLocaleTimeString('en-GB').slice(0, 5)\r\n    this.sunset = new Date(period.sunset * 1000).toLocaleTimeString('en-GB').slice(0, 5)\r\n    this.humidity = period.humidity\r\n    this.pressure = period.pressure\r\n    this.wind_speed = period.wind_speed\r\n    this.co = co\r\n  }\r\n\r\n  getHueColors () {\r\n    const hueMax = (1.0 - (this.maxTempF / this.maxTemp)) * 240\r\n    const hueMin = (1.0 - (this.minTempF / this.maxTemp)) * 240\r\n    const hueColors = `; background: linear-gradient(70deg, hsl( ${hueMin} , 90%, 80%) 40%, hsl( ${hueMax} , 90%, 80%) 40%)`\r\n    return hueColors\r\n  }\r\n\r\n  getCurrentMarkedId () {\r\n    const currentMarkedId = 'city-' + this.currentMarked.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '').replace(' ', '-').toLowerCase()\r\n    return `checkId${currentMarkedId}`\r\n  }\r\n\r\n  getColorScaleHeads () {\r\n    const range = Array.range(this.minTemp, this.maxTemp, 0.5, 1)\r\n    const stepMin = range.filter(n => { return this.minTempF > n }).length\r\n    const stepMax = range.filter(n => { return this.maxTempF > n }).length\r\n    const colorScale = range.map(step => { return `hsl( ${((1.0 - (step / this.maxTemp)) * 240)} , 90%, 80%)` })\r\n    const heads = colorScale.map((color, idx) => {\r\n      if (stepMin === idx) { return `<th style= 'background-color: ${color}; font-size: xx-small'>&nbsp;ᐁ</th>` }\r\n      else if (stepMax === idx) { return `<th style= 'background-color: ${color}; font-size: xx-small'>&nbsp;ᐃ</th>` }\r\n      else { return `<th style= 'background-color: ${color}; font-size: xx-small'>&nbsp;</th>` }\r\n    }).join('')\r\n    return heads\r\n  }\r\n\r\n  html () {\r\n    const showClass = _isMobile ? '' : 'show'\r\n    const collapseIcon = _isMobile ? '<i class=\"bi bi-arrows-collapse\"></i>' : ''\r\n    let autoDragBtn = _isMobile ? `<button class=\"btn-sm btn-light\" id=\"${this.getCurrentMarkedId()}-${this.co}-autodrag\" onclick=\"autoDrag(this.id)\"><i class=\"bi bi-binoculars\"></i></button>` : ''\r\n    return (`\r\n      <div class=\"col-md-3\" id=\"${this.getCurrentMarkedId()}-${this.co}\" style=\"margin-top:20px;\" draggable=\"true\" ondragstart=\"drag(event)\">\r\n          <div class=\"card\" style=\"${this.getHueColors()}\">\r\n              <table style=\"width:100%\">\r\n                  <tr>${this.getColorScaleHeads()}</tr>\r\n              </table>\r\n              <h4 class=\"card-title text-center\" data-toggle=\"collapse\" href=\"#collapseId${this.co}\" role=\"button\" aria-expanded=\"false\">${collapseIcon}${this.dayName}\\n${this.ISODate}</h4>\r\n              <img class=\"card-img mx-auto d-block\" style=\"max-width: 40%; margin:-10% 0px -10% 0px;\" src=\"${this.iconSrc}\">\r\n              <h5 class=\"card-title text-center\" style=\"margin:0\">${this.description}</h5>\r\n              <div class=\"card-body\">\r\n                  <div class=\"collapse ${showClass}\" id=\"collapseId${this.co}\">\r\n                      <p class=\"card-text text-center\">▼ Low: ${this.minTempF} &nbsp;|&nbsp; ▲ High: ${this.maxTempF}</p>\r\n                      <div id=\"weatherinfo\">\r\n                      <p><img class=\"icon\" src=\"./img/sunrise.svg\"> ${this.sunrise}</p>\r\n                      <p><img class=\"icon\" src=\"./img/sunset.svg\"> ${this.sunset}</p>\r\n                      <p><img class=\"icon\" src=\"./img/humidity.svg\"> ${this.humidity}</p>\r\n                      <p><img class=\"icon\" src=\"./img/pressure.svg\"> ${this.pressure}</p>\r\n                      <p><img class=\"icon\" src=\"./img/wind.svg\"> ${this.wind_speed}</p>\r\n                  </div>\r\n                  </div>\r\n              </div>\r\n          </div>\r\n          ${autoDragBtn}\r\n      </div>\r\n    `)\r\n  }\r\n}\r\n\r\nfunction _adsHolder(company) {\r\n  switch (company) {\r\n    case 'Google':\r\n      return (`\r\n                <div class=\"col-md-3\" style=\"margin-top:20px;\">\r\n                    <div class=\"card\" style=\"background-color: red;\">\r\n                        <div class=\"card-body\">\r\n                            <p>Ads go here</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                `)\r\n      break\r\n    default:\r\n      break\r\n  }\r\n}\r\n","// Dangling variables: 'accessibility' <==> 'GMap'\r\n// __currentSpokenCity, __currentSpokenForecast\r\n\r\n// JUST CALLED THROUGH ACCESSIBILITY !! otherwise, it would mess up all things !!\r\n\r\nlet __currentSpokenCity\r\nlet paragraph\r\nlet __currentSpokenForecast\r\n\r\nfunction searchPlace () {\r\n  const autocompleteService = new google.maps.places.AutocompleteService()\r\n  const placesService = new google.maps.places.PlacesService(map)\r\n  if (!__currentSpokenCity) {\r\n    return\r\n  }\r\n  const fetchSuggestions = function (predictions, status) {\r\n    const fetchPlaceDetails = function (placeResults, status) {\r\n      if (status !== google.maps.places.PlacesServiceStatus.OK) {\r\n        speak('I am sorry, there was an error final results')\r\n        return\r\n      }\r\n      // this will fill __currentSpokenForecast with a transcript for Weather forecast\r\n      nearbyRequest(placeResults)\r\n      setTimeout(function () {\r\n        speak(__currentSpokenForecast)\r\n      }, 3000)\r\n    }\r\n    if (status !== google.maps.places.PlacesServiceStatus.OK) {\r\n      speak('I am sorry, I could not find any city for ' + __currentSpokenCity)\r\n      return\r\n    }\r\n    speak('I am now looking for ' + predictions[0].terms[0].value)\r\n    placesService.getDetails({ placeId: predictions[0].place_id }, fetchPlaceDetails)\r\n  }\r\n  // service.getQueryPredictions({ input: __currentSpokenCity }, fetchSuggestions)\r\n  autocompleteService.getPlacePredictions({ input: __currentSpokenCity, types: ['(cities)']/*, componentRestrictions: { country: 'fr' }*/ }, fetchSuggestions)\r\n}\r\n\r\nvar synth\r\nvar SpeechRecognition\r\nvar recognition\r\n\r\nfunction speak (paragraph) {\r\n  if (synth.speaking) {\r\n    console.error('speechSynthesis.speaking')\r\n    return\r\n  }\r\n  const text = new SpeechSynthesisUtterance(paragraph)\r\n  text.lang = 'en-US'\r\n  text.onend = function (event) {\r\n    console.log('SpeechSynthesisUtterance.onend')\r\n  }\r\n  text.onerror = function (event) {\r\n    console.error('SpeechSynthesisUtterance.onerror')\r\n  }\r\n  synth.speak(text)\r\n}\r\n\r\nfunction _fireAccessFunctions (first, justRefresh) {\r\n  if (!first) {\r\n    if (recognition)\r\n      recognition = undefined\r\n    return\r\n  }\r\n  if (typeof (webkitSpeechRecognition) === 'undefined') {\r\n    console.log('browser does not support speech recognition')\r\n    return\r\n  }\r\n  synth = window.speechSynthesis\r\n  SpeechRecognition = SpeechRecognition || webkitSpeechRecognition\r\n  recognition = new SpeechRecognition()\r\n  recognition.continuous = false\r\n  recognition.lang = 'en-US'\r\n  recognition.interimResults = false\r\n  recognition.maxAlternatives = 1\r\n\r\n  document.body.onkeyup = function (e) {\r\n    if (recognition && e.key === ' ') {\r\n      recognition.start()\r\n      console.log('Ready to receive a new city command.')\r\n    }\r\n    if (synth.speaking && e.key === 'Control') {\r\n      synth.cancel()\r\n      console.log('You shut me up.')\r\n    }\r\n  }\r\n  recognition.onresult = function (event) {\r\n    const city = event.results[0][0].transcript\r\n    console.log('Result received: ' + city + '.')\r\n    const confidence = event.results[0][0].confidence\r\n    console.log('Confidence: ' + confidence)\r\n    if (confidence > 0.9) {\r\n      paragraph = 'Is it ' + city + '?'\r\n      speak(paragraph)\r\n      __currentSpokenCity = city\r\n      searchPlace()\r\n    }\r\n    else {\r\n      paragraph = 'I am sorry, could you say that again ?'\r\n      speak(paragraph)\r\n    }\r\n  }\r\n  recognition.onspeechend = function () {\r\n    recognition.stop()\r\n  }\r\n  recognition.onnomatch = function (event) {\r\n    console.log(\"I didn't recognise that city.\")\r\n  }\r\n  recognition.onerror = function (event) {\r\n    console.log('Error occurred in recognition: ' + event.error)\r\n  }\r\n  if (!justRefresh) {\r\n    paragraph = 'Hello, Weather Venue is accessible through speech although not fully garanteed. I will assist you on how to look for a city weather forecast. Whenever you want to look for a city, tap spacebar then tell using microphone the name of the city. If you want to interrupt me tap control.'\r\n    speak(paragraph)\r\n  }\r\n}\r\n\r\nfunction _initAccessibility(language) {\r\n  // Accessibility is supported only for English\r\n  if (language === 'en') {\r\n    // accessibility\r\n    const choiceViaLS = localStorage.getItem('accessibilitySwitch') !== null && localStorage.getItem('accessibilitySwitch') === 'true'\r\n    __id('accessibilitySwitch').addEventListener('click', function () {\r\n      console.log('accessibilitySwitch clicked ')\r\n      const isChecked = __id('accessibilitySwitch').checked\r\n      const value = isChecked ? 1 : 0\r\n      value ? localStorage.setItem('accessibilitySwitch', 'true') : localStorage.removeItem('accessibilitySwitch')\r\n      const choiveViaTog = localStorage.getItem('accessibilitySwitch') !== null && localStorage.getItem('accessibilitySwitch') === 'true'\r\n      if (choiveViaTog) {\r\n        _fireAccessFunctions(true, false)\r\n      }else{\r\n        _fireAccessFunctions(false, false)\r\n      }\r\n    })\r\n    if (choiceViaLS) {\r\n      _fireAccessFunctions(true, true)\r\n    }\r\n  }\r\n}\r\n","// ONLY EXECUTE THE WHOLE SCRIPT ON index PAGES!!\r\n// __id('date') is a test to assure that 'GMap.js' is called only in index page. Because it is also included in all other pages with no need in 'after_body.ejs'\r\nconst today = new Date().toDateString()\r\n__id('date').innerHTML = today\r\n\r\n// Global variables\r\n// 'js_variables.js' ==> 'GMap.js'\r\n// _myStorage, _styles, _isMobile, _autocompleteOptions\r\n// _styleItDark(), _styleItWhite(), _showLoading(), _hideLoading(),\r\n// _setWithExpiry(), _getWithExpiry()\r\n\r\n// 'lang_mappings.js' and 'html_holders.js' ==> 'GMap.js'\r\n// AqiCard, TemperatureCard, _weekdaysLangs(), _aqiLangs(), _picturesLangs()\r\n\r\n// 'accessibility.js' ==> 'Gmap.js'\r\n// _fireAccessFunctions()\r\n\r\n// CurrentList is a class holder for 'data' object which is the server response,\r\n// containing a list of features, weather, pollution. It should assure a safe instanciation and access\r\nclass CurrentList {\r\n  constructor (data) {\r\n    if (!this.isFeatures(data) || !this.isWeather(data)) {\r\n      return { isValid: false }\r\n    }\r\n    this.currentList = data\r\n    this.weather = data.weather\r\n    this.pollution = data.pollution\r\n    this.location = data.features[0].properties.name\r\n    this.dailies = data.weather[0].daily\r\n    this.coordinates = data.features[0].geometry.coordinates\r\n    this.isValid = true\r\n  }\r\n\r\n  isFeatures (data) {\r\n    return data && data.features && data.features.length\r\n  }\r\n\r\n  isWeather (data) {\r\n    return data && data.weather && data.weather.length\r\n  }\r\n}\r\n\r\n// currentObj is an instance of CurrentList\r\n// map, currentMarked, markers, autocomplete, language, and directions are all global variables holding one value, \r\n// that could change with a new city search or other user interractions\r\nlet currObj = { isValid: false }\r\nlet currentMarked\r\nlet map\r\nlet markers = []\r\nlet autocomplete\r\nlet language = 'en'\r\nlet directions = { start_location: undefined, end_location: undefined }\r\n\r\n// callbacks control\r\nlet last = new Date().getTime()\r\nlet first = true\r\nlet center = { lat: -33.8688, lng: 151.2195 }\r\n\r\n// sets default geolocation for center based on originating page: {index.html, index_ar.html}\r\nfunction refreshCenter () {\r\n  const params = _getScriptParams(['lang', 'centerLocation'])\r\n  language = params[0]\r\n  const centerLocation = params[1]\r\n  switch (centerLocation) {\r\n    case 'algiers':\r\n      center = { lat: 36.75, lng: 3.05 }\r\n      break\r\n    case 'paris':\r\n      center = { lat: 48.85, lng: 2.35 }\r\n      break\r\n    case 'london':\r\n      center = { lat: 51.50, lng: 0.12 }\r\n      break\r\n    default:\r\n      break\r\n  }\r\n  // When initMap is called for a second time, choose the earlier center not to move the map center away in the globe\r\n  if (currObj.isValid) {\r\n    center = {\r\n      lat: currObj.coordinates[1],\r\n      lng: currObj.coordinates[0]\r\n    }\r\n  }\r\n}\r\n\r\n// MAIN\r\n// Instanciate a map. For first visit, there is no search yet and as a result no center, thus we take passsed parameters (language / centerLocation) and decide center\r\n// Refreshes DOM too after response, this is why initMap calls nearbyRequest and nearbyRequest calls initMap back\r\n/**\r\n * refreshCenter()\r\n * new google.maps.Map()\r\n * configUIControls()\r\n * _initAccessibility()\r\n * map.data.addGeoJson()\r\n * showAlertsList()\r\n * populateHeatMap()\r\n * renderForecastDays()\r\n * renderPollution()\r\n * getPicture()\r\n * nearbyRequest()\r\n */\r\n\r\nfunction initMap () {\r\n  refreshCenter()\r\n  // Instantiate the map or clean it if it already exists\r\n  if (!map) {\r\n    map = new google.maps.Map(__id('map'), {\r\n      center: center,\r\n      zoom: 10,\r\n      rotateControl: false,\r\n      mapTypeControl: false,\r\n      streetViewControl: false\r\n    })\r\n  } else {\r\n    // initMap() being called a second time, clear earlier data\r\n    (function (m) {\r\n      m.data.forEach(function (f) {\r\n        m.data.remove(f)\r\n      })\r\n    }(map))\r\n    google.maps.event.trigger(map, 'resize')\r\n  }\r\n  configUIControls()\r\n  _initAccessibility(language)\r\n  // Populate current list of cities nearby on the map\r\n  if (currObj.isValid) {\r\n    map.data.addGeoJson(currObj.currentList)\r\n    clearMarkers()\r\n    getMarkers()\r\n    showMarkers()\r\n    map.data.setStyle({\r\n      strokeColor: 'blue'\r\n    })\r\n    // Fit map size to its markers\r\n    var bounds = new google.maps.LatLngBounds()\r\n    map.data.forEach(function (feature) {\r\n      feature.getGeometry().forEachLatLng(function (latlng) {\r\n        bounds.extend(latlng)\r\n      })\r\n    })\r\n    map.fitBounds(bounds)\r\n    map.setCenter(center)\r\n    map.setZoom(11)\r\n    // Show alerts panel\r\n    showAlertsList(currObj)\r\n    populateHeatMap(0)\r\n  }\r\n\r\n  // Create the infowindow for the center marker\r\n  let infowindow = new google.maps.InfoWindow()\r\n  let infowindowContent = __id('infowindow-content')\r\n  const infowindowContentPrime = infowindowContent.cloneNode(true)\r\n  infowindow.setContent(infowindowContent)\r\n  const marker = new google.maps.Marker({\r\n    map: map,\r\n    animation: google.maps.Animation.DROP\r\n  })\r\n\r\n  let latestClicked = ''\r\n  // marker onclick: populate the forecast data on the HTML cards (renderForecastDays)\r\n  if (markers && markers.length > 0) {\r\n    markers.forEach(marker => {\r\n      marker.addListener('click', () => {\r\n        // console.log(marker.title)\r\n        currentMarked = marker.title\r\n        // Do not render again when the same marker is clicked !\r\n        if (latestClicked === marker.title) {\r\n          return\r\n        } else {\r\n          latestClicked = marker.title\r\n        }\r\n        infowindowContentPrime.getElementsByClassName('title')[0].innerHTML = marker.title\r\n        infowindow.close()\r\n        infowindow.setContent(infowindowContentPrime)\r\n        infowindow.open(map, marker)\r\n        toggleBounce()\r\n        if (currObj.isValid) {\r\n          __id('location').innerHTML = marker.title // currObj.location;\r\n          cityWeather = currObj.weather.filter((item) => {\r\n            return (item.cityName === marker.title)\r\n          })[0]\r\n          cityPollution = currObj.pollution.filter((item) => {\r\n            return (item.cityName === marker.title)\r\n          })[0]\r\n          renderForecastDays(cityWeather.daily)\r\n          renderPollution(cityPollution)\r\n        }\r\n      })\r\n      marker.addListener('mousedown', (e) => {\r\n        console.log('mousedown')\r\n      })\r\n      marker.addListener('rightclick', (e) => {\r\n        configURLsControls(marker)\r\n      })\r\n      function toggleBounce () {\r\n        if (marker.getAnimation() !== null) {\r\n          marker.setAnimation(null)\r\n        } else {\r\n          markers.forEach(marker_ => {\r\n            marker_.setAnimation(null)\r\n          })\r\n          marker.setAnimation(google.maps.Animation.BOUNCE)\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  // Define behaviour for possible second searches\r\n  autocomplete.addListener('place_changed', () => {\r\n    if (!first && ((new Date().getTime() - last) < 200)) {\r\n      console.log('quick re-call, ignore.')\r\n      return\r\n    }\r\n    first = false\r\n    last = new Date().getTime()\r\n    infowindow.close()\r\n    const place = autocomplete.getPlace()\r\n    if (!place.geometry) return\r\n    if (place.geometry.viewport) {\r\n      map.fitBounds(place.geometry.viewport)\r\n    } else {\r\n      map.setCenter(place.geometry.location)\r\n      map.setZoom(11)\r\n    }\r\n\r\n    // Set the position of the marker using the place ID and location.\r\n    marker.setPlace({\r\n      placeId: place.place_id,\r\n      location: place.geometry.location\r\n    })\r\n    marker.setVisible(false)\r\n    infowindowContent.children.namedItem('place-name').textContent = place.name\r\n    // infowindowContent.children.namedItem(\"place-id\").textContent =\r\n    //     place.place_id;\r\n    infowindowContent.children.namedItem('place-address').textContent =\r\n      place.formatted_address\r\n    // infowindow.open(map, marker);\r\n    currentMarked = place.name\r\n    getPicture(place.name)\r\n    nearbyRequest(place)\r\n    showAlertsList(currObj)\r\n  })\r\n  // Populate current alerts of all cities on a floating HTML panel on the map\r\n  showAlertsList(currObj)\r\n}\r\n// When browser doesn't support Geolocation\r\nfunction handleLocationError(browserHasGeolocation, infoWindow, pos) {\r\n  infoWindow.setPosition(pos)\r\n  infoWindow.setContent(\r\n    browserHasGeolocation\r\n      ? 'Error: The Geolocation service failed.'\r\n      : \"Error: Your browser doesn't support geolocation.\"\r\n  )\r\n  infoWindow.open(map)\r\n}\r\n\r\n// Instanciate new UI controles for DOM page or Google map. Configure UI controles or retrieve present UI controles when they exist.\r\n/**\r\n * darkSwitch\r\n * heatmap slider\r\n * new google.maps.places.Autocomplete\r\n * panButton and geolocation\r\n */\r\nfunction configUIControls () {\r\n  // First time visit: style map night or regular based on earlier preferences\r\n  const darkThemeSelected = localStorage.getItem('darkSwitch') !== null && localStorage.getItem('darkSwitch') === 'dark'\r\n  darkThemeSelected ? _styleItDark() : _styleItWhite()\r\n  // Define on toggle behaviour.\r\n  google.maps.event.addDomListener(__id('darkSwitch'), 'click', function () {\r\n    var toggle = localStorage.getItem('darkSwitch') !== null && localStorage.getItem('darkSwitch') === 'dark'\r\n    toggle ? _styleItWhite() : _styleItDark()\r\n  })\r\n\r\n  // Slider\r\n  const slider = __id('formControlRange')\r\n  const sliderForm = __id('formControlRange0')\r\n  let moving\r\n  if (!_isMobile) {\r\n    map.controls[google.maps.ControlPosition.TOP_LEFT].clear()\r\n    map.controls[google.maps.ControlPosition.TOP_LEFT].push(sliderForm)\r\n  }\r\n  slider.oninput = function () {\r\n    $('#rangeval').html(`Day ${slider.value}`)\r\n    moving = populateHeatMap(slider.value - 1)\r\n    if (!moving) {\r\n      slider.value = 1\r\n      $('#rangeval').html('Day 1')\r\n    }\r\n  }\r\n\r\n  // Create the autocompletion search bar if does not exist already\r\n  var input = __id('pac-input')\r\n  if (input == null) {\r\n    const div = document.createElement('INPUT')\r\n    div.id = 'pac-input'\r\n    div.className = 'controls'\r\n    div.type = 'text'\r\n    div.placeholder = 'Enter a location'\r\n    document.body.appendChild(div)\r\n    input = __id('pac-input')\r\n  }\r\n  if (!autocomplete) {\r\n    autocomplete = new google.maps.places.Autocomplete(input, _autocompleteOptions)\r\n    map.controls[google.maps.ControlPosition.TOP_CENTER].clear()\r\n    map.controls[google.maps.ControlPosition.TOP_CENTER].push(input)\r\n    autocomplete.bindTo('bounds', map)\r\n    // Specify just the place data fields that you need.\r\n    autocomplete.setFields(['place_id', 'geometry', 'name'])\r\n  }\r\n\r\n  // Geolocation\r\n  currentMarked = 'geolocated'\r\n  // Create Geolocation button if it does not exist\r\n  var panButton = __class('custom-map-control-button')[0]\r\n  if (panButton) {\r\n    return\r\n  }\r\n\r\n  var infoWindow = new google.maps.InfoWindow()\r\n  const locationButton = document.createElement('button')\r\n  locationButton.textContent = 'Go to Current Location'\r\n  locationButton.classList.add('custom-map-control-button')\r\n  map.controls[google.maps.ControlPosition.TOP_RIGHT].clear()\r\n  map.controls[google.maps.ControlPosition.TOP_RIGHT].push(locationButton)\r\n  locationButton.addEventListener('click', () => {\r\n    // Try HTML5 geolocation.\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          const pos = {\r\n            lat: position.coords.latitude,\r\n            lng: position.coords.longitude\r\n          }\r\n          infoWindow.setPosition(pos)\r\n          infoWindow.setContent('Location found.')\r\n          infoWindow.open(map)\r\n          map.setCenter(pos)\r\n          pos.name = 'Current place'\r\n          nearbyTriggeredRequest(pos)\r\n          __id('imgGrid').innerHTML = ''\r\n          showAlertsList(currObj)\r\n        },\r\n        () => {\r\n          handleLocationError(true, infoWindow, map.getCenter())\r\n        }\r\n      )\r\n    } else {\r\n      // Browser doesn't support Geolocation\r\n      handleLocationError(false, infoWindow, map.getCenter())\r\n    }\r\n  })\r\n}\r\n\r\n// Configure Google map URLs based on user interactions (successive right clicks on markers)\r\n// Called when a marker is right clicked\r\nfunction configURLsControls (marker) {\r\n  // Change marker icon between normal and black states using marker.setIcon\r\n  const newDest = `${marker.position.lat()},${marker.position.lng()}`\r\n  let controlUI\r\n  if (!directions.start_location) {\r\n    directions.start_location = newDest\r\n    marker.setIcon('https://www.google.com/mapfiles/marker_black.png')\r\n    return\r\n  }\r\n  if (!directions.end_location && (directions.start_location !== newDest)) {\r\n    directions.end_location = newDest\r\n    const link = `https://www.google.com/maps/dir/?api=1&origin=${directions.start_location}&destination=${directions.end_location}&travelmode=driving`\r\n    if (!__id('URL')) {\r\n      controlUI = document.createElement('div')\r\n      controlUI.setAttribute('id', 'URL')\r\n    } else {\r\n      controlUI = __id('URL')\r\n      controlUI.innerHTML = ''\r\n    }\r\n    const a = document.createElement('a')\r\n    const linkText = document.createTextNode('🔗Google Map\\'s directions')\r\n    a.appendChild(linkText)\r\n    a.title = 'Google Map'\r\n    a.href = link\r\n    a.target = '_blank'\r\n    a.style.cssText = 'background-color: #2a2a3c; color: #fff'\r\n    controlUI.appendChild(a)\r\n    map.controls[google.maps.ControlPosition.BOTTOM_CENTER].clear()\r\n    map.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(controlUI)\r\n    marker.setIcon('https://www.google.com/mapfiles/marker_black.png')\r\n    return\r\n  }\r\n  // Refresh DOM for all markers after 'marker.setIcon' has been called on some markers\r\n  markers.forEach(marker_ => {\r\n    // console.log(marker_.iconSrc)\r\n    marker_.setIcon(marker_.iconSrc)\r\n  })\r\n  // Create an URL in map's bottom\r\n  controlUI = __id('URL')\r\n  controlUI.innerHTML = ''\r\n  map.controls[google.maps.ControlPosition.BOTTOM_CENTER].clear()\r\n  map.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(controlUI)\r\n  directions = { start_location: undefined, end_location: undefined }\r\n}\r\n\r\n// Called once the user search for a city, look for weather cached data for today (local user time) for the city,\r\n// If not found, create an AJAX request for it\r\n/**\r\n * _showLoading(), _hideLoading()\r\n * _getWithExpiry(), _setWithExpiry()\r\n * \"nearby/\" is the main API in back-end\r\n * renderForecastDays()\r\n * initMap()\r\n */\r\nfunction nearbyRequest (place) {\r\n  _showLoading() // Block page while loading\r\n  const requestObject = JSON.stringify({\r\n    lat: place.geometry.location.lat(),\r\n    lng: place.geometry.location.lng(),\r\n    cityname: place.name,\r\n    language: language\r\n  })\r\n  fetch('nearby/' + requestObject, { localCache: true, cacheTTL: 5 }).then(function (response) {\r\n    return response.json()\r\n  }).then(function (data) {\r\n    currObj = new CurrentList(data.data)\r\n    __id('location').innerHTML = currObj.location\r\n    renderForecastDays(currObj.dailies)\r\n    initMap()\r\n    populateHeatMap(0)\r\n    _hideLoading() // Unblock page\r\n  })\r\n}\r\n\r\n// Same as nearbyRequest()\r\nfunction nearbyTriggeredRequest (place) {\r\n  _showLoading() // Block page while loading\r\n  const requestObject = JSON.stringify({\r\n    lat: place.lat,\r\n    lng: place.lng,\r\n    cityname: place.name,\r\n    language: language\r\n  })\r\n  fetch('nearby/' + requestObject, { localCache: true, cacheTTL: 5 }).then(function (response) {\r\n    return response.json()\r\n  }).then(function (data) {\r\n    currObj = new CurrentList(data.data)\r\n    __id('location').innerHTML = currObj.location\r\n    renderForecastDays(currObj.dailies)\r\n    initMap()\r\n    _hideLoading() // Unblock page\r\n  })\r\n}\r\n\r\n// Create an HTML panel containing weather alerts for all current cities\r\nfunction showAlertsList (currObj) {\r\n  if (!currObj.isValid) {\r\n    return\r\n  }\r\n  if (_isMobile) {\r\n    return\r\n  }\r\n  const cityNames = currObj.weather.map(elem => { return elem.cityName })\r\n  const alerts = currObj.weather.map((elem, idx) => { return elem.alerts ? { city: cityNames[idx], alert: elem.alerts[0] } : undefined }).filter(elem => { return elem })\r\n\r\n  let panel = document.createElement('ul')\r\n  // If the panel already exists, use it. Else, create it and add to the page.\r\n  if (__id('panel')) {\r\n    panel = __id('panel')\r\n    panel.style = 'overflow-y: scroll;'\r\n    // If panel is already open, close it\r\n    if (panel.classList.contains('open')) {\r\n      panel.classList.remove('open')\r\n    }\r\n  } else {\r\n    panel.setAttribute('id', 'panel')\r\n    const body = document.body\r\n    body.insertBefore(panel, body.childNodes[0])\r\n  }\r\n  map.controls[google.maps.ControlPosition.BOTTOM_LEFT].clear()\r\n  map.controls[google.maps.ControlPosition.BOTTOM_LEFT].push(panel)\r\n\r\n  // Clear the previous details\r\n  while (panel.lastChild) {\r\n    panel.removeChild(panel.lastChild)\r\n  }\r\n\r\n  if (!alerts || alerts.length === 0) {\r\n    panel.style.display = 'none'\r\n    return\r\n  }\r\n  panel.style.display = 'block'\r\n  alerts.forEach((alert) => {\r\n    // Add alert details with text formatting\r\n    const name = document.createElement('li')\r\n    name.classList.add('alert')\r\n    name.textContent = alert.city\r\n    panel.appendChild(name)\r\n    const alertContent = document.createElement('p')\r\n    alertContent.classList.add('alertContent')\r\n    alertContent.textContent = alert.alert.event\r\n    panel.appendChild(alertContent)\r\n  })\r\n  // Open the panel\r\n  panel.classList.add('open')\r\n}\r\n\r\n/**\r\n * new HeatmapOverlay()\r\n * map getScale() on weather\r\n */\r\nlet heatmap\r\nlet heatMapData\r\nlet temp\r\nconst getScale = (min, max, value) => Math.floor(5 * (value - min) / (max - min))\r\nfunction populateHeatMap (day) {\r\n  if (!currObj.isValid) {\r\n    return false\r\n  }\r\n  let temps = currObj.weather.map(a => { return a.daily[day].temp.min })\r\n  const tempsMax = Math.max(...temps)\r\n  const tempsMin = Math.min(...temps)\r\n  temps = temps.map(a => { return getScale(tempsMin, tempsMax, a) })\r\n  temp = []\r\n  temp = currObj.weather.map((a, idx) => { return { location: new google.maps.LatLng(a.lat, a.lon), weight: temps[idx] } })\r\n  heatMapData = new google.maps.MVCArray(temp)\r\n  if (!heatmap) {\r\n    heatmap = new google.maps.visualization.HeatmapLayer({\r\n      data: heatMapData,\r\n      radius: 150,\r\n      opacity: 0.5\r\n    })\r\n    heatmap.setMap(map)\r\n  } else {\r\n    heatmap.set('data', heatMapData)\r\n    // heatmap.set('opacity', 0.5)\r\n    // heatmap.set('radius', 150)\r\n  }\r\n  return true\r\n}\r\n\r\nArray.range = function(from, to, step, prec) {\r\n  if (typeof from === 'number') {\r\n    const A = [from]\r\n    step = typeof step === 'number' ? Math.abs(step) : 1\r\n    if (!prec) {\r\n      prec = (from + step) % 1 ? String((from + step) % 1).length + 1 : 0\r\n    }\r\n    if (from > to) {\r\n      while (+(from -= step).toFixed(prec) >= to) A.push(+from.toFixed(prec))\r\n    } else {\r\n      while (+(from += step).toFixed(prec) <= to) A.push(+from.toFixed(prec))\r\n    }\r\n    return A\r\n  }\r\n}\r\n\r\n// Create and Update the HTML list of div cards holding a list of weather information for one city in a week\r\n// Fill __currentSpokenForecast with a transcript for Weather forecast\r\n// hueColors: calculated background color based on the current tempreture and all weather average\r\nlet lastIcon\r\nfunction renderForecastDays (dailies) {\r\n  // console.log(\"renderForecastDays\");\r\n  // console.log(JSON.stringify(dailies));\r\n  dailies.sort(function (first, second) {\r\n    return second.dt - first.dt\r\n  })\r\n  const weekdayNames = _weekdaysLangs(language)\r\n  lastIcon = `url(https://openweathermap.org/img/wn/${dailies[dailies.length - 1].weather[0].icon || 'na'}.png)`\r\n  const choiceTheme = localStorage.getItem('themeSwitch') !== null && localStorage.getItem('themeSwitch') === 'true'\r\n  if (choiceTheme) {\r\n    document.body.style.backgroundImage = lastIcon\r\n    document.documentElement.style.backgroundImage = lastIcon\r\n  }\r\n  __id('forecast-items').innerHTML = ''\r\n  const maxTemp = Math.max(...dailies.map((item) => { return item.temp.max }))\r\n  const minTemp = Math.min(...dailies.map((item) => { return item.temp.min }))\r\n  dailies.forEach(function (period, co) {\r\n    const card = new TemperatureCard(language, period, maxTemp, minTemp, currentMarked, co)\r\n    __id('forecast-items').insertAdjacentHTML('afterbegin', card.html())\r\n  })\r\n  // const minMaxBtn = '<div class=\"text-center\"><button type=\"button\" class=\"btn btn-light\" id=\"minmax\" onclick=\"minMax()\"><i class=\"bi bi-thermometer\"></i><i class=\"bi bi-thermometer-high\"></i></button></div>'\r\n  // __id('forecast-items').insertAdjacentHTML('beforebegin', minMaxBtn)\r\n\r\n  dailies.reverse()\r\n  __currentSpokenForecast = 'Now, let’s see what the weather is like in ' + __currentSpokenCity + ': '\r\n  dailies.forEach(function (period, key) {\r\n    const toPrecision = x => Number.parseFloat(x).toPrecision(1)\r\n    const d = new Date(0)\r\n    d.setUTCSeconds(period.dt)\r\n    const dayName = weekdayNames[d.getDay()] // new Date(period.dateTimeISO).getDay()\r\n    const maxTempF = period.temp.max || 'N/A'\r\n    const minTempF = period.temp.min || 'N/A'\r\n    const description = period.weather[0].description || 'N/A'\r\n    // transcript\r\n    let chain = ''\r\n    switch (key) {\r\n      case 0:\r\n        chain = 'Today is '\r\n        break\r\n      case 1:\r\n        chain = 'Tomorrow is '\r\n        break\r\n      default:\r\n        (dailies.length - 1 === key) ? chain = 'Finally, on ' : chain = 'On '\r\n        break\r\n    }\r\n    __currentSpokenForecast += `${chain} ${dayName}, ${d.toDateString().slice(4, 10)}, it feels like ${description} with a maximum temperature of ${toPrecision(maxTempF)}°C and a minimum of ${toPrecision(minTempF)}°. `\r\n  })\r\n}\r\n\r\n// Create and Update the HTML div card holding pollution information and scale for one city for today only\r\nfunction renderPollution (pollution) {\r\n  const aqi = pollution.list[0].main.aqi\r\n  const { co, no, no2 } = pollution.list[0].components\r\n  const today = pollution.list[0].dt\r\n  const card = new AqiCard(language, aqi, today, co, no, no2)\r\n  __id('forecast-items').insertAdjacentHTML('beforeend', card.html())\r\n}\r\n\r\n// #getMarkers, #setMapOnAll, #clearMarkers, #showMarkers are helpers to refresh markers.\r\n// Detach old features then attach new markers to map\r\nfunction getMarkers () {\r\n  if (!currObj.isValid) {\r\n    return\r\n  }\r\n  center = {\r\n    lat: currObj.coordinates[1],\r\n    lng: currObj.coordinates[0]\r\n  }\r\n  var bounds = new google.maps.LatLngBounds()\r\n\r\n  let idx = 0\r\n  const COLORS = ['blue', 'purple', 'green', 'yellow', 'red']\r\n  const getColor = (min, max, value) => COLORS[Math.floor(COLORS.length * (value - min) / (max - min))]\r\n\r\n  const maxTemp = Math.max(...currObj.weather.map((item) => { return item.daily[0].temp.max }))\r\n  const minTemp = Math.min(...currObj.weather.map((item) => { return item.daily[0].temp.min }))\r\n  map.data.forEach(function (feature) {\r\n    // if (feature.getGeometry().getType() === 'Polygon') {\r\n    //     feature.getGeometry().forEachLatLng(function(latlng) {\r\n    //         bounds.extend(latlng);\r\n    //     });\r\n    // } else\r\n    if (feature.getGeometry().getType() === 'Point') {\r\n      const todayTempCeil = (currObj.weather[idx].daily[0].temp.max)\r\n      const todayTempFloor = (currObj.weather[idx++].daily[0].temp.min)\r\n      const todayTemp = (todayTempCeil + todayTempFloor) / 2\r\n      const LatLng = feature.getGeometry().get()\r\n      const marker = new google.maps.Marker({\r\n        position: LatLng,\r\n        map: map,\r\n        animation: google.maps.Animation.DROP,\r\n        title: feature.i.name,\r\n        iconSrc: `https://maps.google.com/mapfiles/ms/icons/${getColor(minTemp, maxTemp, todayTemp)}-dot.png`\r\n      })\r\n      // console.log('minTemp', minTemp, 'maxTemp', maxTemp, 'todayTemp', todayTemp)\r\n      marker.setIcon(`https://maps.google.com/mapfiles/ms/icons/${getColor(minTemp, maxTemp, todayTemp)}-dot.png`)\r\n      markers.push(marker)\r\n      // remove previous markers from map.data\r\n      map.data.remove(feature)\r\n    }\r\n  })\r\n}\r\n\r\n// Sets the map on all markers in the array.\r\nfunction setMapOnAll (map) {\r\n  for (let i = 0; i < markers.length; i++) {\r\n    markers[i].setMap(map)\r\n  }\r\n}\r\n\r\n// Removes the markers from the map, but keeps them in the array.\r\nfunction clearMarkers () {\r\n  for (let i = 0; i < markers.length; i++) {\r\n    markers[i].setVisible(false)\r\n  }\r\n  setMapOnAll(null)\r\n  markers = []\r\n}\r\n\r\n// Shows any markers currently in the array.\r\nfunction showMarkers () {\r\n  for (let i = 0; i < markers.length; i++) {\r\n    markers[i].setVisible(true)\r\n  }\r\n  setMapOnAll(map)\r\n}\r\n\r\n// Get pictures for seached place\r\n/**\r\n * new google.maps.places.PlacesService\r\n * _myStorage.getItem(place), _myStorage.setItem(place, urls)\r\n * populate pictures on featured_pictures div\r\n */\r\nfunction getPicture (place) {\r\n  const [success, fail] = _picturesLangs(language)\r\n  __id('imgGrid').innerHTML = ''\r\n  let cache = _myStorage.getItem(place)\r\n  if (cache) {\r\n    cache = JSON.parse(cache)\r\n    for (let i = 0; i < cache.photos.length; i++) {\r\n      __id('imgGrid').innerHTML += '<div class=\"featured_pictures\"><img src=\"' + cache.photos[i] + '\" alt=\"' + cache.names[i] + '\" /></div>'\r\n    }\r\n    return\r\n  }\r\n  const service = new google.maps.places.PlacesService(map)\r\n  const request = {\r\n    location: map.getCenter(),\r\n    radius: '3000',\r\n    query: place,\r\n    type: ['park'] //, 'mosque', 'airport', 'amusement_park', 'art_gallery', 'casino', 'church', 'museum', 'park', 'synagogue', 'tourist_attraction', 'university']\r\n  }\r\n  let called = false\r\n  service.nearbySearch(request, callback)\r\n  // Checks that the PlacesServiceStatus is OK, and adds a marker\r\n  // using the place ID and location from the PlacesService.\r\n  function callback (results, status) {\r\n    if (called) {\r\n      return\r\n    }\r\n    called = true\r\n    __id('gallery').innerHTML = success(place)\r\n    if (status === google.maps.places.PlacesServiceStatus.OK) {\r\n      const photos = results.map(elem => { return elem.photos ? elem.photos[0].getUrl() : undefined }).filter(elem => { return elem })\r\n      const names = results.map(elem => { return elem.name })\r\n      if (!photos.length) {\r\n        __id('gallery').innerHTML = fail(place)\r\n        return\r\n      }\r\n      _myStorage.setItem(place, JSON.stringify({ photos: photos, names: names }))\r\n      for (let i = 0; i < photos.length; i++) {\r\n        __id('imgGrid').innerHTML += '<div class=\"featured_pictures\"><img src=\"' + photos[i] + '\" alt=\"' + names[i] + '\" /></div>'\r\n      }\r\n    } else {\r\n      __id('gallery').innerHTML = fail(place)\r\n    }\r\n  }\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', function () {\r\n  setTimeout(function () {\r\n    const params = _getScriptParams(['lang', 'centerLocation'])\r\n    language = params[0]\r\n    const centerLocation = params[1]\r\n    const pos = {\r\n      lat: center.lat,\r\n      lng: center.lng\r\n    }\r\n    map.setCenter(pos)\r\n    pos.name = centerLocation.charAt(0).toUpperCase() + centerLocation.slice(1)\r\n    nearbyTriggeredRequest(pos)\r\n    __id('imgGrid').innerHTML = ''\r\n  }, 2000)\r\n}, false)\r\n"]}