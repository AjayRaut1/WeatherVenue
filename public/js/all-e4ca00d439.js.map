{"version":3,"sources":["js_variables.js","lang_mappings.js","html_holders.js","accessibility.js","GMap.js"],"names":["__id","id","document","getElementById","__class","classs","getElementsByClassName","_myStorage","window","localStorage","_isMobile","test","navigator","userAgent","substr","_styles","default","hide","featureType","stylers","visibility","elementType","night","color","pSBC","p","c0","c1","l","r","g","b","P","f","t","h","i","parseInt","m","Math","round","a","this","pSBCr","d","n","length","x","split","slice","parseFloat","toString","undefined","cardsColors","_styleItDark","documentElement","style","backgroundColor","map","setOptions","styles","src","Array","from","card","forEach","_styleItWhite","idx","_showLoading","classList","add","_hideLoading","remove","_setWithExpiry","key","value","now","Date","item","expiry","day","getDay","month","getMonth","year","getFullYear","setItem","JSON","stringify","_getWithExpiry","itemStr","getItem","parse","removeItem","addEventListener","checked","body","backgroundImage","_autocompleteOptions","types","_generateDummyCards","weekdayNames","dummyDailies","innerHTML","weather","icon","maxTemp","max","temp","period","setUTCSeconds","dt","ISODate","toISOString","dayName","iconSrc","maxTempF","minTempF","min","description","hueColor","template","insertAdjacentHTML","minMax","querySelectorAll","firstElementChild","filter","Boolean","indexOf","replace","allowDrop","ev","preventDefault","drag","dataTransfer","setData","target","drop","data","getData","toBe","cloneNode","title","charAt","toUpperCase","join","setAttribute","childNodes","button","createElement","onclick","shareIt","appendChild","autoDrag","autodrag_id","location","emptyIt","elements","prototype","call","node","parentNode","removeChild","card_id","dd","domtoimage","toBlob","width","clientWidth","height","clientHeight","bgcolor","tagName","transform","transformOrigin","then","blob","file","File","type","text","files","canShare","share","console","log","_weekdaysLangs","language","Error","_aqiLangs","1","2","3","4","5","_picturesLangs","success","fail","place","fetch","removeFromStorage","storage","cacheKey","cacheResponse","hourstl","response","cres","clone","dataType","headers","get","toLowerCase","e","self","url","settings","ttl","TypeError","getStorage","localCache","cacheTTL","Content-type","genCacheKey","cacheValid","isCacheValid","Response","status","statusText","Content-Type","Promise","resolve","reject","provideResponse","bind","AqiCard","[object Object]","aqiInterpretation","aqi","co","no","no2","coo","trim","TemperatureCard","minTemp","currentMarked","sunrise","toLocaleTimeString","sunset","humidity","pressure","wind_speed","hueMax","normalize","range","stepMin","stepMax","step","autoDragBtn","getCurrentMarkedId","getHueColors","getColorScaleHeads","windSpeed","_adsHolder","company","__currentSpokenCity","paragraph","__currentSpokenForecast","searchPlace","autocompleteService","google","maps","places","AutocompleteService","placesService","PlacesService","getPlacePredictions","input","predictions","PlacesServiceStatus","OK","speak","terms","getDetails","placeId","place_id","placeResults","nearbyRequest","setTimeout","synth","SpeechRecognition","recognition","speaking","error","SpeechSynthesisUtterance","lang","onend","event","onerror","_fireAccessFunctions","first","justRefresh","speechSynthesis","webkitSpeechRecognition","continuous","interimResults","maxAlternatives","onkeyup","start","cancel","onresult","city","results","transcript","confidence","onspeechend","stop","onnomatch","_initAccessibility","choiceViaLS","today","toDateString","CurrentList","isFeatures","isWeather","isValid","currentList","pollution","features","properties","name","dailies","daily","coordinates","geometry","autocomplete","heatmap","heatMapData","currObj","markers","directions","start_location","end_location","last","getTime","center","lat","lng","refreshCenter","mapScripts","getElementsByTagName","ss","getAttribute","initMap","trigger","Map","zoom","rotateControl","mapTypeControl","streetViewControl","configUIControls","addGeoJson","clearMarkers","getMarkers","showMarkers","setStyle","strokeColor","bounds","LatLngBounds","feature","getGeometry","forEachLatLng","latlng","extend","fitBounds","setCenter","setZoom","showAlertsList","populateHeatMap","infowindow","InfoWindow","infowindowContent","infowindowContentPrime","setContent","marker","Marker","animation","Animation","DROP","latestClicked","addListener","close","open","getAnimation","setAnimation","marker_","BOUNCE","cityWeather","cityName","cityPollution","renderForecastDays","renderPollution","configURLsControls","getPlace","viewport","setPlace","setVisible","children","namedItem","textContent","formatted_address","getPicture","handleLocationError","browserHasGeolocation","infoWindow","pos","setPosition","addDomListener","slider","sliderForm","moving","controls","ControlPosition","TOP_LEFT","clear","push","oninput","$","html","div","className","placeholder","Autocomplete","TOP_CENTER","bindTo","setFields","locationButton","TOP_RIGHT","geolocation","getCurrentPosition","position","coords","latitude","longitude","nearbyTriggeredRequest","getCenter","newDest","controlUI","setIcon","link","linkText","createTextNode","href","cssText","BOTTOM_CENTER","requestObject","cityname","json","cityNames","elem","alerts","alert","panel","contains","insertBefore","BOTTOM_LEFT","lastChild","display","alertContent","getScale","floor","temps","tempsMax","tempsMin","LatLng","lon","weight","MVCArray","set","visualization","HeatmapLayer","radius","opacity","setMap","lastIcon","sort","second","colorScale","currentMarkedId","reverse","toPrecision","Number","chain","list","main","components","COLORS","getColor","getType","todayTemp","setMapOnAll","cache","photos","names","service","request","query","called","nearbySearch","getUrl","to","prec","A","abs","String","toFixed","centerLocation"],"mappings":"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","file":"all-e4ca00d439.js","sourcesContent":["/* eslint-disable no-unused-vars */\r\n\r\n// js_variables ==> GMap\r\n// _myStorage, _styles, _autocompleteOptions\r\n// _styleItDark(), _styleItWhite(), _showLoading(), _hideLoading(),\r\n// _setWithExpiry(), _getWithExpiry(), _fireAccessFunctions(), _generateDummyCards()\r\n\r\nfunction __id (id) { return document.getElementById(id) }\r\nfunction __class (classs) { return document.getElementsByClassName(classs) }\r\n\r\nconst _myStorage = window.localStorage\r\n\r\nlet _isMobile = false\r\n// device detection\r\nif (/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent) ||\r\n    /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(navigator.userAgent.substr(0, 4))) {\r\n  _isMobile = true\r\n}\r\n\r\n// less styling, setting business positions off and transit off\r\nconst _styles = {\r\n  default: [],\r\n  hide: [\r\n    {\r\n      featureType: 'poi.business',\r\n      stylers: [{ visibility: 'off' }]\r\n    },\r\n    {\r\n      featureType: 'transit',\r\n      elementType: 'labels.icon',\r\n      stylers: [{ visibility: 'off' }]\r\n    },\r\n    {\r\n      featureType: 'poi',\r\n      elementType: 'labels',\r\n      stylers: [\r\n        { visibility: 'off' }\r\n      ]\r\n    }\r\n  ],\r\n  night: [\r\n    { elementType: 'geometry', stylers: [{ color: '#242f3e' }] },\r\n    { elementType: 'labels.text.stroke', stylers: [{ color: '#242f3e' }] },\r\n    { elementType: 'labels.text.fill', stylers: [{ color: '#746855' }] },\r\n    {\r\n      featureType: 'administrative.locality',\r\n      elementType: 'labels.text.fill',\r\n      stylers: [{ color: '#d59563' }]\r\n    },\r\n    {\r\n      featureType: 'poi',\r\n      elementType: 'labels.text.fill',\r\n      stylers: [{ color: '#d59563' }]\r\n    },\r\n    {\r\n      featureType: 'poi.park',\r\n      elementType: 'geometry',\r\n      stylers: [{ color: '#263c3f' }]\r\n    },\r\n    {\r\n      featureType: 'poi.park',\r\n      elementType: 'labels.text.fill',\r\n      stylers: [{ color: '#6b9a76' }]\r\n    },\r\n    {\r\n      featureType: 'road',\r\n      elementType: 'geometry',\r\n      stylers: [{ color: '#38414e' }]\r\n    },\r\n    {\r\n      featureType: 'road',\r\n      elementType: 'geometry.stroke',\r\n      stylers: [{ color: '#212a37' }]\r\n    },\r\n    {\r\n      featureType: 'road',\r\n      elementType: 'labels.text.fill',\r\n      stylers: [{ color: '#9ca5b3' }]\r\n    },\r\n    {\r\n      featureType: 'road.highway',\r\n      elementType: 'geometry',\r\n      stylers: [{ color: '#746855' }]\r\n    },\r\n    {\r\n      featureType: 'road.highway',\r\n      elementType: 'geometry.stroke',\r\n      stylers: [{ color: '#1f2835' }]\r\n    },\r\n    {\r\n      featureType: 'road.highway',\r\n      elementType: 'labels.text.fill',\r\n      stylers: [{ color: '#f3d19c' }]\r\n    },\r\n    {\r\n      featureType: 'transit',\r\n      elementType: 'geometry',\r\n      stylers: [{ color: '#2f3948' }]\r\n    },\r\n    {\r\n      featureType: 'transit.station',\r\n      elementType: 'labels.text.fill',\r\n      stylers: [{ color: '#d59563' }]\r\n    },\r\n    {\r\n      featureType: 'water',\r\n      elementType: 'geometry',\r\n      stylers: [{ color: '#17263c' }]\r\n    },\r\n    {\r\n      featureType: 'water',\r\n      elementType: 'labels.text.fill',\r\n      stylers: [{ color: '#515c6d' }]\r\n    },\r\n    {\r\n      featureType: 'water',\r\n      elementType: 'labels.text.stroke',\r\n      stylers: [{ color: '#17263c' }]\r\n    },\r\n    {\r\n      featureType: 'poi.business',\r\n      stylers: [{ visibility: 'off' }]\r\n    },\r\n    {\r\n      featureType: 'transit',\r\n      elementType: 'labels.icon',\r\n      stylers: [{ visibility: 'off' }]\r\n    }\r\n  ]\r\n}\r\n// Copyright of PimpTrizkit taken from https://github.com/PimpTrizkit/PJs/wiki/12.-Shade,-Blend-and-Convert-a-Web-Color-(pSBC.js)\r\n// Version 4.0\r\nconst pSBC = (p, c0, c1, l) => {\r\n  let r, g, b, P, f, t, h, i = parseInt, m = Math.round, a = typeof (c1) == 'string'\r\n  if (typeof (p) != 'number' || p < -1 || p > 1 || typeof (c0) != 'string' || (c0[0] != 'r' && c0[0] != '#') || (c1 && !a)) return null\r\n  if (!this.pSBCr) this.pSBCr = (d) => {\r\n    let n = d.length, x = {}\r\n    if (n > 9) {\r\n      [r, g, b, a] = d = d.split(','), n = d.length\r\n      if (n < 3 || n > 4) return null\r\n      x.r = i(r[3] == 'a' ? r.slice(5) : r.slice(4)), x.g = i(g), x.b = i(b), x.a = a ? parseFloat(a) : -1\r\n    } else {\r\n      if (n == 8 || n == 6 || n < 4) return null\r\n      if (n < 6) d = '#' + d[1] + d[1] + d[2] + d[2] + d[3] + d[3] + (n > 4 ? d[4] + d[4] : '')\r\n      d = i(d.slice(1), 16)\r\n      if (n == 9 || n == 5) x.r = d >> 24 & 255, x.g = d >> 16 & 255, x.b = d >> 8 & 255, x.a = m((d & 255) / 0.255) / 1000\r\n      else x.r = d >> 16, x.g = d >> 8 & 255, x.b = d & 255, x.a = -1\r\n    } return x\r\n  }\r\n  h = c0.length > 9, h = a ? c1.length > 9 ? true : c1 == 'c' ? !h : false : h, f = this.pSBCr(c0), P = p < 0, t = c1 && c1 != 'c' ? this.pSBCr(c1) : P ? { r: 0, g: 0, b: 0, a: -1 } : { r: 255, g: 255, b: 255, a: -1 }, p = P ? p * -1 : p, P = 1 - p\r\n  if (!f || !t) return null\r\n  if (l) r = m(P * f.r + p * t.r), g = m(P * f.g + p * t.g), b = m(P * f.b + p * t.b)\r\n  else r = m((P * f.r ** 2 + p * t.r ** 2) ** 0.5), g = m((P * f.g ** 2 + p * t.g ** 2) ** 0.5), b = m((P * f.b ** 2 + p * t.b ** 2) ** 0.5)\r\n  a = f.a, t = t.a, f = a >= 0 || t >= 0, a = f ? a < 0 ? t : t < 0 ? a : a * P + t * p : 0\r\n  if (h) return 'rgb' + (f ? 'a(' : '(') + r + ',' + g + ',' + b + (f ? ',' + m(a * 1000) / 1000 : '') + ')'\r\n  else return '#' + (4294967296 + r * 16777216 + g * 65536 + b * 256 + (f ? m(a * 255) : 0)).toString(16).slice(1, f ? undefined : -2)\r\n}\r\nvar cardsColors\r\n\r\nfunction _styleItDark () {\r\n  document.documentElement.style.backgroundColor = '#111'\r\n  map.setOptions({ styles: _styles.night })\r\n  __id('copyright_google').src = './copyright/powered_by_google_on_non_white_hdpi.png'\r\n  if (!cardsColors) {\r\n    cardsColors = Array.from(__class('card')).map(card => { return card.style.backgroundColor })\r\n    cardsColors = [...cardsColors]\r\n  }\r\n\r\n  Array.from(__class('card')).forEach(card => {\r\n    card.style.backgroundColor = pSBC(-0.2, card.style.backgroundColor)\r\n  })\r\n\r\n  __id('logo').src = './img/weather_venue_856-8_on_black.png'\r\n}\r\n\r\nfunction _styleItWhite () {\r\n  document.documentElement.style.backgroundColor = '#eee'\r\n  map.setOptions({ styles: _styles.hide })\r\n  __id('copyright_google').src = './copyright/powered_by_google_on_white_hdpi.png'\r\n  if (cardsColors) {\r\n    Array.from(__class('card')).forEach(function (card, idx) {\r\n      card.style.backgroundColor = cardsColors[idx]\r\n    })\r\n  }\r\n  __id('logo').src = './img/weather_venue_856-8.png'\r\n}\r\n\r\nfunction _showLoading () {\r\n  __id('spinner-back').classList.add('show')\r\n  __id('spinner-front').classList.add('show')\r\n}\r\n\r\nfunction _hideLoading () {\r\n  __id('spinner-back').classList.remove('show')\r\n  __id('spinner-front').classList.remove('show')\r\n}\r\n\r\nfunction _setWithExpiry (key, value) {\r\n  const now = new Date()\r\n  const day = { day: now.getDay(), month: now.getMonth(), year: now.getFullYear() }\r\n\r\n  // `item` is an object which contains the original value\r\n  // as well as today's date\r\n  const item = {\r\n    value: value,\r\n    expiry: day\r\n  }\r\n  _myStorage.setItem(key, JSON.stringify(item))\r\n}\r\n\r\nfunction _getWithExpiry (key) {\r\n  const itemStr = _myStorage.getItem(key)\r\n  // if the item doesn't exist, return null\r\n  if (!itemStr) {\r\n    return null\r\n  }\r\n  const item = JSON.parse(itemStr)\r\n  const now = new Date()\r\n\r\n  // compare the expiry time of the item with the current time\r\n  if (now.getDay() !== item.expiry.day || now.getMonth() !== item.expiry.month || now.getFullYear() !== item.expiry.year) {\r\n    // If the item generated today, delete the item from storage\r\n    // and return null\r\n    _myStorage.removeItem(key)\r\n    return null\r\n  }\r\n  return item.value\r\n}\r\n\r\n__id('themeSwitch').addEventListener('click', function () {\r\n  const isChecked = __id('themeSwitch').checked\r\n  const value = isChecked ? 1 : 0\r\n  value ? localStorage.setItem('themeSwitch', 'true') : localStorage.removeItem('themeSwitch')\r\n  if (!value) {\r\n    document.body.style.backgroundImage = ''\r\n    document.documentElement.style.backgroundImage = ''\r\n  }\r\n})\r\n\r\nconst _autocompleteOptions = {\r\n  types: ['(cities)']\r\n  // componentRestrictions: {country: \"us\"}\r\n}\r\n\r\nfunction _generateDummyCards () {\r\n  const weekdayNames = [\r\n    'Sunday',\r\n    'Monday',\r\n    'Tuesday',\r\n    'Wednesday',\r\n    'Thursday',\r\n    'Friday',\r\n    'Saturday'\r\n  ]\r\n  const dummyDailies = JSON.parse('[{\\\"dt\\\":1613390400,\\\"sunrise\\\":1613372331,\\\"sunset\\\":1613409052,\\\"temp\\\":{\\\"day\\\":3,\\\"min\\\":-1.78,\\\"max\\\":4.03,\\\"night\\\":1.7,\\\"eve\\\":2.11,\\\"morn\\\":-1.78},\\\"feels_like\\\":{\\\"day\\\":-3.81,\\\"night\\\":-5.13,\\\"eve\\\":-4.54,\\\"morn\\\":-8.32},\\\"pressure\\\":1024,\\\"humidity\\\":66,\\\"dew_point\\\":-9.78,\\\"wind_speed\\\":6.37,\\\"wind_deg\\\":110,\\\"weather\\\":[{\\\"id\\\":800,\\\"main\\\":\\\"Clear\\\",\\\"description\\\":\\\"clear sky\\\",\\\"icon\\\":\\\"01d\\\"}],\\\"clouds\\\":6,\\\"pop\\\":0,\\\"uvi\\\":2},{\\\"dt\\\":1613304000,\\\"sunrise\\\":1613286034,\\\"sunset\\\":1613322553,\\\"temp\\\":{\\\"day\\\":1.9,\\\"min\\\":-2.92,\\\"max\\\":2.79,\\\"night\\\":-0.83,\\\"eve\\\":0.18,\\\"morn\\\":-2.63},\\\"feels_like\\\":{\\\"day\\\":-6.01,\\\"night\\\":-7.09,\\\"eve\\\":-6.16,\\\"morn\\\":-10.66},\\\"pressure\\\":1028,\\\"humidity\\\":63,\\\"dew_point\\\":-14.74,\\\"wind_speed\\\":7.67,\\\"wind_deg\\\":96,\\\"weather\\\":[{\\\"id\\\":804,\\\"main\\\":\\\"Clouds\\\",\\\"description\\\":\\\"overcast clouds\\\",\\\"icon\\\":\\\"04d\\\"}],\\\"clouds\\\":100,\\\"pop\\\":0,\\\"uvi\\\":2},{\\\"dt\\\":1613217600,\\\"sunrise\\\":1613199737,\\\"sunset\\\":1613236054,\\\"temp\\\":{\\\"day\\\":-0.03,\\\"min\\\":-3.34,\\\"max\\\":0.35,\\\"night\\\":-3.11,\\\"eve\\\":-2.1,\\\"morn\\\":-3.34},\\\"feels_like\\\":{\\\"day\\\":-7.28,\\\"night\\\":-10.75,\\\"eve\\\":-9.83,\\\"morn\\\":-10.38},\\\"pressure\\\":1032,\\\"humidity\\\":73,\\\"dew_point\\\":-14.61,\\\"wind_speed\\\":6.74,\\\"wind_deg\\\":91,\\\"weather\\\":[{\\\"id\\\":800,\\\"main\\\":\\\"Clear\\\",\\\"description\\\":\\\"clear sky\\\",\\\"icon\\\":\\\"01d\\\"}],\\\"clouds\\\":0,\\\"pop\\\":0,\\\"uvi\\\":2},{\\\"dt\\\":1613131200,\\\"sunrise\\\":1613113437,\\\"sunset\\\":1613149554,\\\"temp\\\":{\\\"day\\\":1.03,\\\"min\\\":-2.08,\\\"max\\\":1.03,\\\"night\\\":-1.78,\\\"eve\\\":-0.68,\\\"morn\\\":-2.08},\\\"feels_like\\\":{\\\"day\\\":-6.05,\\\"night\\\":-8.36,\\\"eve\\\":-7.1,\\\"morn\\\":-8.99},\\\"pressure\\\":1027,\\\"humidity\\\":69,\\\"dew_point\\\":-13.94,\\\"wind_speed\\\":6.54,\\\"wind_deg\\\":87,\\\"weather\\\":[{\\\"id\\\":803,\\\"main\\\":\\\"Clouds\\\",\\\"description\\\":\\\"broken clouds\\\",\\\"icon\\\":\\\"04d\\\"}],\\\"clouds\\\":81,\\\"pop\\\":0,\\\"uvi\\\":1.14},{\\\"dt\\\":1613044800,\\\"sunrise\\\":1613027137,\\\"sunset\\\":1613063054,\\\"temp\\\":{\\\"day\\\":-0.05,\\\"min\\\":-3.07,\\\"max\\\":0.68,\\\"night\\\":-1.31,\\\"eve\\\":-0.84,\\\"morn\\\":-3.07},\\\"feels_like\\\":{\\\"day\\\":-5.91,\\\"night\\\":-8.18,\\\"eve\\\":-6.92,\\\"morn\\\":-8.31},\\\"pressure\\\":1028,\\\"humidity\\\":80,\\\"dew_point\\\":-10.83,\\\"wind_speed\\\":4.95,\\\"wind_deg\\\":88,\\\"weather\\\":[{\\\"id\\\":800,\\\"main\\\":\\\"Clear\\\",\\\"description\\\":\\\"clear sky\\\",\\\"icon\\\":\\\"01d\\\"}],\\\"clouds\\\":10,\\\"pop\\\":0,\\\"uvi\\\":1.5},{\\\"dt\\\":1612958400,\\\"sunrise\\\":1612940834,\\\"sunset\\\":1612976555,\\\"temp\\\":{\\\"day\\\":-1.18,\\\"min\\\":-4.66,\\\"max\\\":0.01,\\\"night\\\":-2.45,\\\"eve\\\":-1.62,\\\"morn\\\":-4.34},\\\"feels_like\\\":{\\\"day\\\":-8.06,\\\"night\\\":-7.01,\\\"eve\\\":-6.79,\\\"morn\\\":-10.94},\\\"pressure\\\":1012,\\\"humidity\\\":78,\\\"dew_point\\\":-12.58,\\\"wind_speed\\\":6.17,\\\"wind_deg\\\":27,\\\"weather\\\":[{\\\"id\\\":600,\\\"main\\\":\\\"Snow\\\",\\\"description\\\":\\\"light snow\\\",\\\"icon\\\":\\\"13d\\\"}],\\\"clouds\\\":53,\\\"pop\\\":0.52,\\\"snow\\\":0.15,\\\"uvi\\\":1.33},{\\\"dt\\\":1612872000,\\\"sunrise\\\":1612854531,\\\"sunset\\\":1612890055,\\\"temp\\\":{\\\"day\\\":-1.67,\\\"min\\\":-3.98,\\\"max\\\":-0.91,\\\"night\\\":-2.78,\\\"eve\\\":-2.22,\\\"morn\\\":-3.84},\\\"feels_like\\\":{\\\"day\\\":-5.7,\\\"night\\\":-8.87,\\\"eve\\\":-7.43,\\\"morn\\\":-8.63},\\\"pressure\\\":1003,\\\"humidity\\\":85,\\\"dew_point\\\":-9.49,\\\"wind_speed\\\":2.21,\\\"wind_deg\\\":40,\\\"weather\\\":[{\\\"id\\\":804,\\\"main\\\":\\\"Clouds\\\",\\\"description\\\":\\\"overcast clouds\\\",\\\"icon\\\":\\\"04d\\\"}],\\\"clouds\\\":93,\\\"pop\\\":0.12,\\\"uvi\\\":1.33},{\\\"dt\\\":1612785600,\\\"sunrise\\\":1612768225,\\\"sunset\\\":1612803555,\\\"temp\\\":{\\\"day\\\":1.45,\\\"min\\\":-1.19,\\\"max\\\":1.59,\\\"night\\\":-0.53,\\\"eve\\\":0.76,\\\"morn\\\":-1.13},\\\"feels_like\\\":{\\\"day\\\":-1.77,\\\"night\\\":-4.84,\\\"eve\\\":-3.37,\\\"morn\\\":-4.58},\\\"pressure\\\":998,\\\"humidity\\\":81,\\\"dew_point\\\":-5.67,\\\"wind_speed\\\":1.47,\\\"wind_deg\\\":4,\\\"weather\\\":[{\\\"id\\\":804,\\\"main\\\":\\\"Clouds\\\",\\\"description\\\":\\\"overcast clouds\\\",\\\"icon\\\":\\\"04d\\\"}],\\\"clouds\\\":88,\\\"pop\\\":0.14,\\\"uvi\\\":1.29}]')\r\n  __id('forecast-items').innerHTML = ''\r\n  document.body.style.backgroundImage = `url(https://openweathermap.org/img/wn/${dummyDailies[dummyDailies.length - 1].weather[0].icon || 'na'}.png), linear-gradient(to bottom, #82addb 0%,#ebb2b1 100%)`\r\n  document.documentElement.style.backgroundImage = `url(https://openweathermap.org/img/wn/${dummyDailies[dummyDailies.length - 1].weather[0].icon || 'na'}.png), linear-gradient(rgb(235, 178, 177) 0%, rgb(130, 173, 219) 100%)`\r\n  const maxTemp = Math.max(...dummyDailies.map((item) => { return item.temp.max }))\r\n  dummyDailies.forEach(function (period) {\r\n    const d = new Date(0)\r\n    d.setUTCSeconds(period.dt)\r\n    const ISODate = d.toISOString().slice(0, 10)\r\n    const dayName = weekdayNames[d.getDay()] // new Date(period.dateTimeISO).getDay()\r\n    const iconSrc = `https://openweathermap.org/img/wn/${period.weather[0].icon || 'na'}@4x.png`\r\n    const maxTempF = period.temp.max || 'N/A'\r\n    const minTempF = period.temp.min || 'N/A'\r\n    const weather = period.weather[0].description || 'N/A'\r\n    const hue = (1.0 - (maxTempF / maxTemp)) * 240\r\n    let hueColor = `hsl( ${hue} , 90%, 80%)`\r\n\r\n    hueColor = '; background-color: ' + hueColor\r\n    const template = (`\r\n            <div class=\"col-md-3\">\r\n              <div class=\"card\" style=\"width: 100%${hueColor}\">\r\n                  <div class=\"card-body\">\r\n                      <h4 class=\"card-title text-center\">${dayName}</h4>\r\n                      <h5 class=\"card-title text-center\">${ISODate}</h5>\r\n                      <p><img class=\"card-img mx-auto d-block\" style=\"max-width: 100px;\" src=\"${iconSrc}\"></p>\r\n                      <h6 class=\"card-title text-center\">${weather}</h6>\r\n                      <p class=\"card-text text-center\">High: ${maxTempF} <br />Low: ${minTempF}</p>\r\n                  </div>\r\n              </div>\r\n            </div>\r\n        `)\r\n    __id('forecast-items').insertAdjacentHTML('afterbegin', template)\r\n  })\r\n}\r\n\r\nfunction minMax() {\r\n  let cards = Array.from(document.querySelectorAll('[id^=\"checkIdcity\"]')).map(a=> {return a.firstElementChild}).filter(Boolean).slice(0,8)\r\n  cards.forEach(card => {\r\n    let style = card.style.backgroundImage\r\n    if (style.indexOf('40%') > -1) {\r\n      card.style.backgroundImage = style.replace('40%', '90%').replace('40%', '90%')\r\n      return\r\n    }\r\n    if (style.indexOf('10%') > -1) {\r\n      card.style.backgroundImage = style.replace('10%', '40%').replace('10%', '40%')\r\n      return\r\n    }\r\n    if (style.indexOf('90%') > -1) {\r\n      card.style.backgroundImage = style.replace('90%', '10%').replace('90%', '10%')\r\n      return\r\n    }\r\n  });\r\n}\r\n\r\n// Comparision\r\nfunction allowDrop(ev) {\r\n  ev.preventDefault()\r\n}\r\n\r\nfunction drag(ev) {\r\n  ev.dataTransfer.setData('text', ev.target.id)\r\n}\r\n\r\nfunction drop(ev) {\r\n  ev.preventDefault()\r\n  var data = ev.dataTransfer.getData('text')\r\n  let toBe = __id(data).cloneNode(true)\r\n  const title = `<h3>${ data.split('-').slice(1,-1).map(a => {return a.charAt(0).toUpperCase() + a.slice(1) }).join('-') }</h3>`\r\n  toBe.setAttribute('id', data + '_clone')\r\n  toBe.setAttribute('draggable', false)\r\n  // toBe.style.cursor =''\r\n  toBe.childNodes[1].firstElementChild.setAttribute('href', '')\r\n  toBe.insertAdjacentHTML('afterbegin', title)\r\n  if(_isMobile) {\r\n    var button = document.createElement('button')\r\n    button.innerHTML = 'Share'\r\n    button.classList.add('btn-sm')\r\n    button.classList.add('btn-outline-warning')\r\n    button.onclick = function(){\r\n      shareIt(data + '_clone')\r\n      return false\r\n    };\r\n    toBe.appendChild(button)\r\n  }\r\n  ev.target.appendChild(toBe)\r\n}\r\n\r\nfunction autoDrag (autodrag_id) {\r\n  __id(autodrag_id).remove()\r\n  let data = autodrag_id.slice(0, -9)\r\n  let toBe = __id(data).cloneNode(true)\r\n  toBe.childNodes\r\n  const title = `<h3>${ data.split('-').slice(1,-1).map(a => {return a.charAt(0).toUpperCase() + a.slice(1) }).join('-') }</h3>`\r\n  toBe.setAttribute('id', data + '_clone')\r\n  toBe.setAttribute('draggable', false)\r\n  // toBe.style.cursor =''\r\n  toBe.childNodes[1].firstElementChild.setAttribute('href', '')\r\n  toBe.insertAdjacentHTML('afterbegin', title)\r\n  if(_isMobile) {\r\n    var button = document.createElement('button')\r\n    button.innerHTML = 'Share'\r\n    button.classList.add('btn-sm')\r\n    button.classList.add('btn-outline-warning')\r\n    button.onclick = function(){\r\n      shareIt(data + '_clone')\r\n      return false\r\n    };\r\n    toBe.appendChild(button)\r\n  }\r\n  toBe.childNodes[4].remove()\r\n  __id('comparision-items').appendChild(toBe)\r\n  window.location = '#comparision-items'\r\n}\r\n\r\nfunction emptyIt() {\r\n  const elements = document.querySelectorAll('[id*=\"_clone\"]')\r\n  Array.prototype.forEach.call(elements, function(node) {\r\n    node.parentNode.removeChild(node)\r\n  })\r\n}\r\n\r\nfunction shareIt(card_id) {\r\n  const dd = __id(card_id);//.cloneNode(true)\r\n  // dd.style.backgroundColor =\"white\"\r\n  const scale = 2\r\n  // dd.childNodes[4].remove()\r\n  domtoimage.toBlob(dd, {\r\n      width: dd.clientWidth * scale,\r\n      height: dd.clientHeight * scale,\r\n      bgcolor: 'white',\r\n      filter: function (node) { return (node.tagName !== 'BUTTON') },\r\n      style: {\r\n        transform: 'scale('+scale+')',\r\n        transformOrigin: 'top left'\r\n      }\r\n    }).then(function (blob) {\r\n      const file = new File([blob], 'WeatherVenue.png', { type: blob.type })\r\n      const data = {\r\n        title: 'WeatherVenue.com',\r\n        text: `Weather in ${card_id.split('_')[0].split('-')[1]}`,\r\n        files: [file],\r\n      }\r\n      if(navigator.canShare && navigator.canShare(data)) {\r\n        navigator.share(data)\r\n      } else {\r\n        console.log('cannot share ')\r\n      }\r\n    })\r\n}\r\n\r\n/**\r\n * Copyright (c) Christopher Keefer, 2016.\r\n * https://github.com/SaneMethod/fetchCache\r\n *\r\n * Override fetch in the global context to allow us to cache the response to fetch in a Storage interface\r\n * implementing object (such as localStorage).\r\n */\r\n (function (fetch) {\r\n  /* If the context doesn't support fetch, we won't attempt to patch in our\r\n   caching using fetch, for obvious reasons. */\r\n  if (!fetch) return;\r\n\r\n  /**\r\n   * Generate the cache key under which to store the local data - either the cache key supplied,\r\n   * or one generated from the url, the Content-type header (if specified) and the body (if specified).\r\n   *\r\n   * @returns {string}\r\n   */\r\n  function genCacheKey(url, settings) {\r\n      var {headers:{'Content-type': type}} = ('headers' in settings) ? settings : {headers: {}},\r\n          {body} = settings;\r\n\r\n      return settings.cacheKey || url + (type || '') + (body || '');\r\n  }\r\n\r\n  /**\r\n   * Determine whether we're using localStorage or, if the user has specified something other than a boolean\r\n   * value for options.localCache, whether the value appears to satisfy the plugin's requirements.\r\n   * Otherwise, throw a new TypeError indicating what type of value we expect.\r\n   *\r\n   * @param {boolean|object} storage\r\n   * @returns {boolean|object}\r\n   */\r\n  function getStorage(storage) {\r\n      if (!storage) return false;\r\n      if (storage === true) return self.localStorage;\r\n      if (typeof storage === \"object\" && 'getItem' in storage &&\r\n          'removeItem' in storage && 'setItem' in storage) {\r\n          return storage;\r\n      }\r\n      throw new TypeError(\"localCache must either be a boolean value, \" +\r\n          \"or an object which implements the Storage interface.\");\r\n  }\r\n\r\n  /**\r\n   * Remove the item specified by cacheKey and its attendant meta items from storage.\r\n   *\r\n   * @param {Storage|object} storage\r\n   * @param {string} cacheKey\r\n   */\r\n  function removeFromStorage(storage, cacheKey) {\r\n      storage.removeItem(cacheKey);\r\n      storage.removeItem(cacheKey + 'cachettl');\r\n      storage.removeItem(cacheKey + 'dataType');\r\n  }\r\n\r\n  /**\r\n   * Cache the response into our storage object.\r\n   * We clone the response so that we can drain the stream without making it\r\n   * unavailable to future handlers.\r\n   *\r\n   * @param {string} cacheKey Key under which to cache the data string. Bound in\r\n   * fetch override.\r\n   * @param {Storage} storage Object implementing Storage interface to store cached data\r\n   * (text or json exclusively) in. Bound in fetch override.\r\n   * @param {Number} hourstl Number of hours this value shoud remain in the cache.\r\n   * Bound in fetch override.\r\n   * @param {Response} response\r\n   */\r\n  function cacheResponse(cacheKey, storage, hourstl, response) {\r\n      var cres = response.clone(),\r\n          dataType = (response.headers.get('Content-Type') || 'text/plain').toLowerCase();\r\n\r\n      cres.text().then((text) => {\r\n          try {\r\n              storage.setItem(cacheKey, text);\r\n              storage.setItem(cacheKey + 'cachettl', +new Date() + 1000 * 60 * 60 * hourstl);\r\n              storage.setItem(cacheKey + 'dataType', dataType);\r\n          } catch (e) {\r\n              // Remove any incomplete data that may have been saved before the exception was caught\r\n              removeFromStorage(storage, cacheKey);\r\n              console.log('Cache Error: ' + e, cacheKey, text);\r\n          }\r\n      });\r\n\r\n      return response;\r\n  }\r\n\r\n  /**\r\n   * Create a new response containing the cached value, and return a promise\r\n   * that resolves with this response.\r\n   *\r\n   * @param value\r\n   * @param dataType\r\n   * @returns {Promise}\r\n   */\r\n  function provideResponse(value, dataType) {\r\n      var response = new Response(\r\n          value,\r\n          {\r\n              status: 200,\r\n              statusText: 'success',\r\n              headers: {\r\n                  'Content-Type': dataType\r\n              }\r\n          }\r\n      );\r\n\r\n      return new Promise(function (resolve, reject) {\r\n          resolve(response);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Override fetch on the global context, so that we can intercept\r\n   * fetch calls and respond with locally cached content, if available.\r\n   * New parameters available on the call to fetch:\r\n   * localCache   : true // required - either a boolean (if true, localStorage is used,\r\n   * if false request is not cached or returned from cache), or an object implementing the\r\n   * Storage interface, in which case that object is used instead.\r\n   * cacheTTL     : 5, // optional, cache time in hours, default is 5. Use float numbers for\r\n   * values less than a full hour (e.g. 0.5 for 1/2 hour).\r\n   * cacheKey     : 'post', // optional - key under which cached string will be stored.\r\n   * isCacheValid : function  // optional - return true for valid, false for invalid.\r\n   */\r\n  self.fetch = function (url, settings) {\r\n      var storage = getStorage(settings.localCache),\r\n          hourstl = settings.cacheTTL || 5,\r\n          cacheKey = genCacheKey(url, settings),\r\n          cacheValid = settings.isCacheValid,\r\n          ttl,\r\n          value,\r\n          dataType;\r\n\r\n      if (!storage) return fetch(url, settings);\r\n\r\n      ttl = storage.getItem(cacheKey + 'cachettl');\r\n\r\n      if (cacheValid && typeof cacheValid === 'function' && !cacheValid()) {\r\n          removeFromStorage(storage, cacheKey);\r\n          ttl = 0;\r\n      }\r\n\r\n      if (ttl && ttl < +new Date()) {\r\n          removeFromStorage(storage, cacheKey);\r\n      }\r\n\r\n      value = storage.getItem(cacheKey);\r\n\r\n      if (!value) {\r\n          /* If not cached, we'll make the request and add a then block to the resulting promise,\r\n           in which we'll cache the result. */\r\n          return fetch(url, settings).then(cacheResponse.bind(null, cacheKey, storage, hourstl));\r\n      }\r\n\r\n      /* Value is cached, so we'll simply create and respond with a promise of our own,\r\n       and provide a response object. */\r\n      dataType = storage.getItem(cacheKey + 'dataType') || 'text/plain';\r\n      return provideResponse(value, dataType);\r\n  };\r\n})(self.fetch);\r\n","function _weekdaysLangs(language) {\r\n  switch (language) {\r\n    case 'en':\r\n      return [\r\n        'Sunday',\r\n        'Monday',\r\n        'Tuesday',\r\n        'Wednesday',\r\n        'Thursday',\r\n        'Friday',\r\n        'Saturday'\r\n      ]\r\n    case 'ar':\r\n      return [\r\n        'الأحد',\r\n        'الإثنين',\r\n        'الثلثاء',\r\n        'الأربعاء',\r\n        'الخميس',\r\n        'الجمعة',\r\n        'السبت'\r\n      ]\r\n    case 'fr':\r\n      return [\r\n        'Dimanche',\r\n        'Lundi',\r\n        'Mardi',\r\n        'Mercredi',\r\n        'Jeudi',\r\n        'Vendredi',\r\n        'Samedi'\r\n      ]\r\n    default:\r\n      throw new Error('Language mapping error in _weekdayNames with language=', language)\r\n  }\r\n}\r\n\r\nfunction _aqiLangs(language) {\r\n  switch (language) {\r\n    case 'en':\r\n      return {\r\n        1: 'Air Quality: Good',\r\n        2: 'Air Quality: Fair',\r\n        3: 'Air Quality: Moderate',\r\n        4: 'Air Quality: Poor',\r\n        5: 'Air Quality: Very Poor'\r\n      }\r\n    case 'ar':\r\n      return {\r\n        1: 'جودة الهواء: جيدة',\r\n        2: 'جودة الهواء: مقبولة',\r\n        3: 'جودة الهواء: متوسطة',\r\n        4: 'جودة الهواء: ضعيفة',\r\n        5: 'جودة الهواء: ضعيفة جدا'\r\n      }\r\n    case 'fr':\r\n      return {\r\n        1: 'Qualité de l\\'air: bonne',\r\n        2: 'Qualité de l\\'air: passable',\r\n        3: 'Qualité de l\\'air: modérée',\r\n        4: 'Qualité de l\\'air: médiocre',\r\n        5: 'Qualité de l\\'air: très mauvaise'\r\n      }\r\n    default:\r\n      throw new Error('Language mapping error in _aqiInterpretation with language=', language)\r\n  }\r\n}\r\n\r\nfunction _picturesLangs(language) {\r\n  let success, fail\r\n  switch (language) {\r\n    case 'en':\r\n      success = (place) => `Local pictures of ${place}`\r\n      fail = (place) => `There are no pictures found for ${place}`\r\n      return [success, fail]\r\n    case 'ar':\r\n      success = (place) => `صور منطقة ${place}`\r\n      fail = (place) => `لا توجد صور لمنطقة ${place}`\r\n      return [success, fail]\r\n    case 'fr':\r\n      success = (place) => `Photos locales de ${place}`\r\n      fail = (place) => `Il n'y a pas de photos trouvées pour ${place}`\r\n      return [success, fail]\r\n    default:\r\n      throw new Error('Language mapping error in _picturesLangs with language=', language)\r\n  }\r\n}\r\n","class AqiCard {\r\n  constructor (style, aqiInterpretation, aqi, ISODate, co, no, no2) {\r\n    const theme = {\r\n      1: '#4C5273',\r\n      2: '#F2E96B',\r\n      3: '#F2CA50',\r\n      4: '#F2A03D',\r\n      5: '#A67041'\r\n    }\r\n    this.style = style + theme[aqi]\r\n    this.aqiInterpretation = aqiInterpretation\r\n    this.aqi = aqi\r\n    this.ISODate = ISODate\r\n    this.co = co\r\n    this.no = no\r\n    this.no2 = no2\r\n  }\r\n\r\n  html () {\r\n    let coo = 1\r\n    return (`\r\n        <div class=\"col-md-3\" style=\"margin-top:20px;\">\r\n            <div class=\"card\" style=\"${this.style}\">\r\n                <h4 class=\"card-title text-center\" data-toggle=\"collapse\" href=\"#collapseId20\" role=\"button\" aria-expanded=\"true\">${this.aqiInterpretation[this.aqi]}</h4>\r\n                <table style=\"width:100%\">\r\n                    <tr>\r\n                        <th style= 'background-color: #4C5273; font-size: xx-small'>${this.aqiInterpretation[coo++].split(':')[1].trim()}</th>\r\n                        <th style= 'background-color: #F2E96B; font-size: xx-small'>${this.aqiInterpretation[coo++].split(':')[1].trim()}</th>\r\n                        <th style= 'background-color: #F2CA50; font-size: xx-small'>${this.aqiInterpretation[coo++].split(':')[1].trim()}</th>\r\n                        <th style= 'background-color: #F2A03D; font-size: xx-small'>${this.aqiInterpretation[coo++].split(':')[1].trim()}</th>\r\n                        <th style= 'background-color: #A67041; font-size: xx-small'>${this.aqiInterpretation[coo++].split(':')[1].trim()}</th>\r\n                    </tr>\r\n                </table>\r\n                <div class=\"card-body\">\r\n                    <div class=\"collapse show\" id=\"collapseId20\">\r\n                        <h5 class=\"card-title text-center\">${this.ISODate}</h5>\r\n                        <p class=\"card-text text-center\">CO: ${this.co} </p>\r\n                        <p class=\"card-text text-center\">NO: ${this.no} </p>\r\n                        <p class=\"card-text text-center\">NO2: ${this.no2} </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    `)\r\n  }\r\n}\r\n\r\nclass TemperatureCard {\r\n  constructor (language, period, maxTemp, minTemp, currentMarked, co) {\r\n    this.period = period\r\n    this.maxTemp = maxTemp\r\n    this.minTemp = minTemp\r\n    this.currentMarked = currentMarked\r\n    const d = new Date(0)\r\n    d.setUTCSeconds(period.dt)\r\n    this.ISODate = d.toISOString().slice(5, 10)\r\n    this.dayName = _weekdaysLangs(language)[d.getDay()]\r\n    this.iconSrc = `https://openweathermap.org/img/wn/${period.weather[0].icon || 'na'}@4x.png`\r\n    this.maxTempF = period.temp.max || 'N/A'\r\n    this.minTempF = period.temp.min || 'N/A'\r\n    this.description = period.weather[0].description || 'N/A'\r\n    this.sunrise = new Date(period.sunrise * 1000).toLocaleTimeString('en-GB').slice(0, 5)\r\n    this.sunset = new Date(period.sunset * 1000).toLocaleTimeString('en-GB').slice(0, 5)\r\n    this.humidity = period.humidity\r\n    this.pressure = period.pressure\r\n    this.wind_speed = period.wind_speed\r\n    this.co = co\r\n  }\r\n\r\n  getHueColors () {\r\n    const hueMax = (1.0 - (this.maxTempF / this.maxTemp)) * 240\r\n    const hueMin = (1.0 - (this.minTempF / this.maxTemp)) * 240\r\n    const hueColors = `; border-radius: 5px; border: 5px solid rgb(122 122 122 / 30%); background: linear-gradient(70deg, hsl( ${hueMin} , 90%, 80%) 40%, hsl( ${hueMax} , 90%, 80%) 40%)`\r\n    return hueColors\r\n  }\r\n\r\n  getCurrentMarkedId () {\r\n    const currentMarkedId = 'city-' + this.currentMarked.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '').replace(' ', '-').toLowerCase()\r\n    return `checkId${currentMarkedId}`\r\n  }\r\n\r\n  getColorScaleHeads () {\r\n    const range = Array.range(this.minTemp, this.maxTemp, 0.5, 1)\r\n    const stepMin = range.filter(n => { return this.minTempF > n }).length\r\n    const stepMax = range.filter(n => { return this.maxTempF > n }).length\r\n    const colorScale = range.map(step => { return `hsl( ${((1.0 - (step / this.maxTemp)) * 240)} , 90%, 80%)` })\r\n    const heads = colorScale.map((color, idx) => {\r\n      if (stepMin === idx) { return `<th style= 'background-color: ${color}; font-size: xx-small'>&nbsp;ᐁ</th>` }\r\n      else if (stepMax === idx) { return `<th style= 'background-color: ${color}; font-size: xx-small'>&nbsp;ᐃ</th>` }\r\n      else { return `<th style= 'background-color: ${color}; font-size: xx-small'>&nbsp;</th>` }\r\n    }).join('')\r\n    return heads\r\n  }\r\n\r\n  html () {\r\n    let autoDragBtn = _isMobile ? `<button class=\"btn-sm btn-outline-warning\" id=\"${this.getCurrentMarkedId()}-${this.co}-autodrag\" onclick=\"autoDrag(this.id)\"> Compare </button>` : ''\r\n    return (`\r\n      <div class=\"col-md-3\" id=\"${this.getCurrentMarkedId()}-${this.co}\" style=\"margin-top:20px;\" draggable=\"true\" ondragstart=\"drag(event)\">\r\n          <div class=\"card\" style=\"${this.getHueColors()}\">\r\n              <table style=\"width:100%\">\r\n                  <tr>${this.getColorScaleHeads()}</tr>\r\n              </table>\r\n              <h4 class=\"card-title text-center\" data-toggle=\"collapse\" href=\"#collapseId${this.co}\" role=\"button\" aria-expanded=\"true\">${this.dayName}\\n${this.ISODate}</h4>\r\n              <img class=\"card-img mx-auto d-block\" style=\"max-width: 30%;\" src=\"${this.iconSrc}\">\r\n              <div class=\"card-body\">\r\n                  <div class=\"collapse show\" id=\"collapseId${this.co}\">\r\n                      <h6 class=\"card-title text-center\">${this.description}</h6>\r\n                      <p class=\"card-text text-center\">High: ${this.maxTempF} <br />Low: ${this.minTempF}</p>\r\n                      <div id=\"weatherinfo\">\r\n                      <p><img class=\"icon\" src=\"./img/sunrise.svg\"> ${this.sunrise}</p>\r\n                      <p><img class=\"icon\" src=\"./img/sunset.svg\"> ${this.sunset}</p>\r\n                      <p><img class=\"icon\" src=\"./img/humidity.svg\"> ${this.humidity}</p>\r\n                      <p><img class=\"icon\" src=\"./img/pressure.svg\"> ${this.pressure}</p>\r\n                      <p><img class=\"icon\" src=\"./img/wind.svg\"> ${this.windSpeed}</p>\r\n                  </div>\r\n                  </div>\r\n              </div>\r\n          </div>\r\n          ${autoDragBtn}\r\n      </div>\r\n    `)\r\n  }\r\n}\r\n\r\nfunction _adsHolder(company) {\r\n  switch (company) {\r\n    case 'Google':\r\n      return (`\r\n                <div class=\"col-md-3\" style=\"margin-top:20px;\">\r\n                    <div class=\"card\" style=\"background-color: red;\">\r\n                        <div class=\"card-body\">\r\n                            <p>Ads go here</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                `)\r\n      break\r\n    default:\r\n      break\r\n  }\r\n}\r\n","// Dangling variables: 'accessibility' <==> 'GMap'\r\n// __currentSpokenCity, __currentSpokenForecast\r\n\r\n// JUST CALLED THROUGH ACCESSIBILITY !! otherwise, it would mess up all things !!\r\n\r\nlet __currentSpokenCity\r\nlet paragraph\r\nlet __currentSpokenForecast\r\n\r\nfunction searchPlace () {\r\n  const autocompleteService = new google.maps.places.AutocompleteService()\r\n  const placesService = new google.maps.places.PlacesService(map)\r\n  if (!__currentSpokenCity) {\r\n    return\r\n  }\r\n  const fetchSuggestions = function (predictions, status) {\r\n    const fetchPlaceDetails = function (placeResults, status) {\r\n      if (status !== google.maps.places.PlacesServiceStatus.OK) {\r\n        speak('I am sorry, there was an error final results')\r\n        return\r\n      }\r\n      // this will fill __currentSpokenForecast with a transcript for Weather forecast\r\n      nearbyRequest(placeResults)\r\n      setTimeout(function () {\r\n        speak(__currentSpokenForecast)\r\n      }, 3000)\r\n    }\r\n    if (status !== google.maps.places.PlacesServiceStatus.OK) {\r\n      speak('I am sorry, I could not find any city for ' + __currentSpokenCity)\r\n      return\r\n    }\r\n    speak('I am now looking for ' + predictions[0].terms[0].value)\r\n    placesService.getDetails({ placeId: predictions[0].place_id }, fetchPlaceDetails)\r\n  }\r\n  // service.getQueryPredictions({ input: __currentSpokenCity }, fetchSuggestions)\r\n  autocompleteService.getPlacePredictions({ input: __currentSpokenCity, types: ['(cities)']/*, componentRestrictions: { country: 'fr' }*/ }, fetchSuggestions)\r\n}\r\n\r\nvar synth\r\nvar SpeechRecognition\r\nvar recognition\r\n\r\nfunction speak (paragraph) {\r\n  if (synth.speaking) {\r\n    console.error('speechSynthesis.speaking')\r\n    return\r\n  }\r\n  const text = new SpeechSynthesisUtterance(paragraph)\r\n  text.lang = 'en-US'\r\n  text.onend = function (event) {\r\n    console.log('SpeechSynthesisUtterance.onend')\r\n  }\r\n  text.onerror = function (event) {\r\n    console.error('SpeechSynthesisUtterance.onerror')\r\n  }\r\n  synth.speak(text)\r\n}\r\n\r\nfunction _fireAccessFunctions (first, justRefresh) {\r\n  if (!first) {\r\n    if (recognition)\r\n      recognition = undefined\r\n    return\r\n  }\r\n  if (typeof (webkitSpeechRecognition) === 'undefined') {\r\n    console.log('browser does not support speech recognition')\r\n    return\r\n  }\r\n  synth = window.speechSynthesis\r\n  SpeechRecognition = SpeechRecognition || webkitSpeechRecognition\r\n  recognition = new SpeechRecognition()\r\n  recognition.continuous = false\r\n  recognition.lang = 'en-US'\r\n  recognition.interimResults = false\r\n  recognition.maxAlternatives = 1\r\n\r\n  document.body.onkeyup = function (e) {\r\n    if (recognition && e.key === ' ') {\r\n      recognition.start()\r\n      console.log('Ready to receive a new city command.')\r\n    }\r\n    if (synth.speaking && e.key === 'Control') {\r\n      synth.cancel()\r\n      console.log('You shut me up.')\r\n    }\r\n  }\r\n  recognition.onresult = function (event) {\r\n    const city = event.results[0][0].transcript\r\n    console.log('Result received: ' + city + '.')\r\n    const confidence = event.results[0][0].confidence\r\n    console.log('Confidence: ' + confidence)\r\n    if (confidence > 0.9) {\r\n      paragraph = 'Is it ' + city + '?'\r\n      speak(paragraph)\r\n      __currentSpokenCity = city\r\n      searchPlace()\r\n    }\r\n    else {\r\n      paragraph = 'I am sorry, could you say that again ?'\r\n      speak(paragraph)\r\n    }\r\n  }\r\n  recognition.onspeechend = function () {\r\n    recognition.stop()\r\n  }\r\n  recognition.onnomatch = function (event) {\r\n    console.log(\"I didn't recognise that city.\")\r\n  }\r\n  recognition.onerror = function (event) {\r\n    console.log('Error occurred in recognition: ' + event.error)\r\n  }\r\n  if (!justRefresh) {\r\n    paragraph = 'Hello, Weather Venue is accessible through speech although not fully garanteed. I will assist you on how to look for a city weather forecast. Whenever you want to look for a city, tap spacebar then tell using microphone the name of the city. If you want to interrupt me tap control.'\r\n    speak(paragraph)\r\n  }\r\n}\r\n\r\nfunction _initAccessibility(language) {\r\n  // Accessibility is supported only for English\r\n  if (language === 'en') {\r\n    // accessibility\r\n    const choiceViaLS = localStorage.getItem('accessibilitySwitch') !== null && localStorage.getItem('accessibilitySwitch') === 'true'\r\n    __id('accessibilitySwitch').addEventListener('click', function () {\r\n      console.log('accessibilitySwitch clicked ')\r\n      const isChecked = __id('accessibilitySwitch').checked\r\n      const value = isChecked ? 1 : 0\r\n      value ? localStorage.setItem('accessibilitySwitch', 'true') : localStorage.removeItem('accessibilitySwitch')\r\n      const choiveViaTog = localStorage.getItem('accessibilitySwitch') !== null && localStorage.getItem('accessibilitySwitch') === 'true'\r\n      if (choiveViaTog) {\r\n        _fireAccessFunctions(true, false)\r\n      }else{\r\n        _fireAccessFunctions(false, false)\r\n      }\r\n    })\r\n    if (choiceViaLS) {\r\n      _fireAccessFunctions(true, true)\r\n    }\r\n  }\r\n}\r\n","// ONLY EXECUTE THE WHOLE SCRIPT ON index PAGES!!\r\n// __id('date') is a test to assure that 'GMap.js' is called only in index page. Because it is also included in all other pages with no need in 'after_body.ejs'\r\nconst today = new Date().toDateString()\r\n__id('date').innerHTML = today\r\n\r\n// Global variables\r\n// 'js_variables.js' ==> 'GMap.js'\r\n// _myStorage, _styles, _isMobile, _autocompleteOptions\r\n// _styleItDark(), _styleItWhite(), _showLoading(), _hideLoading(),\r\n// _setWithExpiry(), _getWithExpiry(), _generateDummyCards()\r\n\r\n// 'lang_mappings.js' and 'html_holders.js' ==> 'GMap.js'\r\n// AqiCard, TemperatureCard, _weekdaysLangs(), _aqiLangs(), _picturesLangs()\r\n\r\n// 'accessibility.js' ==> 'Gmap.js'\r\n// _fireAccessFunctions()\r\n\r\n// CurrentList is a class holder for 'data' object which is the server response,\r\n// containing a list of features, weather, pollution. It should assure a safe instanciation and access\r\nclass CurrentList {\r\n  constructor (data) {\r\n    if (!this.isFeatures(data) || !this.isWeather(data)) {\r\n      return { isValid: false }\r\n    }\r\n    this.currentList = data\r\n    this.weather = data.weather\r\n    this.pollution = data.pollution\r\n    this.location = data.features[0].properties.name\r\n    this.dailies = data.weather[0].daily\r\n    this.coordinates = data.features[0].geometry.coordinates\r\n    this.isValid = true\r\n  }\r\n\r\n  isFeatures (data) {\r\n    return data && data.features && data.features.length\r\n  }\r\n\r\n  isWeather (data) {\r\n    return data && data.weather && data.weather.length\r\n  }\r\n}\r\n\r\n// currentObj is an instance of CurrentList\r\n// map, currentMarked, markers, autocomplete, language, and directions are all global variables holding one value, \r\n// that could change with a new city search or other user interractions\r\nlet currObj = { isValid: false }\r\nlet currentMarked\r\nlet map\r\nlet markers = []\r\nlet autocomplete\r\nlet language = 'en'\r\nlet directions = { start_location: undefined, end_location: undefined }\r\n\r\n// callbacks control\r\nlet last = new Date().getTime()\r\nlet first = true\r\nlet center = { lat: -33.8688, lng: 151.2195 }\r\n\r\n// sets default geolocation for center based on originating page: {index.html, index_ar.html}\r\nfunction refreshCenter () {\r\n  const mapScripts = document.getElementsByTagName('script')\r\n  language = [...mapScripts].map(ss => { return ss.getAttribute('lang') }).filter(Boolean)[0]\r\n  const centerLocation = [...mapScripts].map(ss => { return ss.getAttribute('centerLocation') }).filter(Boolean)[0]\r\n  switch (centerLocation) {\r\n    case 'algiers':\r\n      center = { lat: 36.75, lng: 3.05 }\r\n      break\r\n    case 'paris':\r\n      center = { lat: 48.85, lng: 2.35 }\r\n      break\r\n    case 'london':\r\n      center = { lat: 51.50, lng: 0.12 }\r\n      break\r\n    default:\r\n      break\r\n  }\r\n  // When initMap is called for a second time, choose the earlier center not to move the map center away in the globe\r\n  if (currObj.isValid) {\r\n    center = {\r\n      lat: currObj.coordinates[1],\r\n      lng: currObj.coordinates[0]\r\n    }\r\n  }\r\n}\r\n\r\n// MAIN\r\n// Instanciate a map. For first visit, there is no search yet and as a result no center, thus we take passsed parameters (language / centerLocation) and decide center\r\n// Refreshes DOM too after response, this is why initMap calls nearbyRequest and nearbyRequest calls initMap back\r\n/**\r\n * refreshCenter()\r\n * new google.maps.Map()\r\n * configUIControls()\r\n * _initAccessibility()\r\n * map.data.addGeoJson()\r\n * showAlertsList()\r\n * populateHeatMap()\r\n * renderForecastDays()\r\n * renderPollution()\r\n * getPicture()\r\n * nearbyRequest()\r\n */\r\n\r\nfunction initMap () {\r\n  refreshCenter()\r\n  // Instantiate the map or clean it if it already exists\r\n  if (!map) {\r\n    map = new google.maps.Map(__id('map'), {\r\n      center: center,\r\n      zoom: 10,\r\n      rotateControl: false,\r\n      mapTypeControl: false,\r\n      streetViewControl: false\r\n    })\r\n  } else {\r\n    // initMap() being called a second time, clear earlier data\r\n    (function (m) {\r\n      m.data.forEach(function (f) {\r\n        m.data.remove(f)\r\n      })\r\n    }(map))\r\n    google.maps.event.trigger(map, 'resize')\r\n  }\r\n  configUIControls()\r\n  _initAccessibility(language)\r\n  // Populate current list of cities nearby on the map\r\n  if (currObj.isValid) {\r\n    map.data.addGeoJson(currObj.currentList)\r\n    clearMarkers()\r\n    getMarkers()\r\n    showMarkers()\r\n    map.data.setStyle({\r\n      strokeColor: 'blue'\r\n    })\r\n    // Fit map size to its markers\r\n    var bounds = new google.maps.LatLngBounds()\r\n    map.data.forEach(function (feature) {\r\n      feature.getGeometry().forEachLatLng(function (latlng) {\r\n        bounds.extend(latlng)\r\n      })\r\n    })\r\n    map.fitBounds(bounds)\r\n    map.setCenter(center)\r\n    map.setZoom(11)\r\n    // Show alerts panel\r\n    showAlertsList(currObj)\r\n    populateHeatMap(0)\r\n  }\r\n\r\n  // Create the infowindow for the center marker\r\n  let infowindow = new google.maps.InfoWindow()\r\n  let infowindowContent = __id('infowindow-content')\r\n  const infowindowContentPrime = infowindowContent.cloneNode(true)\r\n  infowindow.setContent(infowindowContent)\r\n  const marker = new google.maps.Marker({\r\n    map: map,\r\n    animation: google.maps.Animation.DROP\r\n  })\r\n\r\n  let latestClicked = ''\r\n  // marker onclick: populate the forecast data on the HTML cards (renderForecastDays)\r\n  if (markers && markers.length > 0) {\r\n    markers.forEach(marker => {\r\n      marker.addListener('click', () => {\r\n        // console.log(marker.title)\r\n        currentMarked = marker.title\r\n        // Do not render again when the same marker is clicked !\r\n        if (latestClicked === marker.title) {\r\n          return\r\n        } else {\r\n          latestClicked = marker.title\r\n        }\r\n        infowindowContentPrime.getElementsByClassName('title')[0].innerHTML = marker.title\r\n        infowindow.close()\r\n        infowindow.setContent(infowindowContentPrime)\r\n        infowindow.open(map, marker)\r\n        toggleBounce()\r\n        if (currObj.isValid) {\r\n          __id('location').innerHTML = marker.title // currObj.location;\r\n          cityWeather = currObj.weather.filter((item) => {\r\n            return (item.cityName === marker.title)\r\n          })[0]\r\n          cityPollution = currObj.pollution.filter((item) => {\r\n            return (item.cityName === marker.title)\r\n          })[0]\r\n          renderForecastDays(cityWeather.daily)\r\n          renderPollution(cityPollution)\r\n        }\r\n      })\r\n      marker.addListener('mousedown', (e) => {\r\n        console.log('mousedown')\r\n      })\r\n      marker.addListener('rightclick', (e) => {\r\n        configURLsControls(marker)\r\n      })\r\n      function toggleBounce () {\r\n        if (marker.getAnimation() !== null) {\r\n          marker.setAnimation(null)\r\n        } else {\r\n          markers.forEach(marker_ => {\r\n            marker_.setAnimation(null)\r\n          })\r\n          marker.setAnimation(google.maps.Animation.BOUNCE)\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  // Define behaviour for possible second searches\r\n  autocomplete.addListener('place_changed', () => {\r\n    if (!first && ((new Date().getTime() - last) < 200)) {\r\n      console.log('quick re-call, ignore.')\r\n      return\r\n    }\r\n    first = false\r\n    last = new Date().getTime()\r\n    infowindow.close()\r\n    const place = autocomplete.getPlace()\r\n    if (!place.geometry) return\r\n    if (place.geometry.viewport) {\r\n      map.fitBounds(place.geometry.viewport)\r\n    } else {\r\n      map.setCenter(place.geometry.location)\r\n      map.setZoom(11)\r\n    }\r\n\r\n    // Set the position of the marker using the place ID and location.\r\n    marker.setPlace({\r\n      placeId: place.place_id,\r\n      location: place.geometry.location\r\n    })\r\n    marker.setVisible(false)\r\n    infowindowContent.children.namedItem('place-name').textContent = place.name\r\n    // infowindowContent.children.namedItem(\"place-id\").textContent =\r\n    //     place.place_id;\r\n    infowindowContent.children.namedItem('place-address').textContent =\r\n      place.formatted_address\r\n    // infowindow.open(map, marker);\r\n    currentMarked = place.name\r\n    getPicture(place.name)\r\n    nearbyRequest(place)\r\n    showAlertsList(currObj)\r\n  })\r\n  // Populate current alerts of all cities on a floating HTML panel on the map\r\n  showAlertsList(currObj)\r\n}\r\n// When browser doesn't support Geolocation\r\nfunction handleLocationError(browserHasGeolocation, infoWindow, pos) {\r\n  infoWindow.setPosition(pos)\r\n  infoWindow.setContent(\r\n    browserHasGeolocation\r\n      ? 'Error: The Geolocation service failed.'\r\n      : \"Error: Your browser doesn't support geolocation.\"\r\n  )\r\n  infoWindow.open(map)\r\n}\r\n\r\n// Instanciate new UI controles for DOM page or Google map. Configure UI controles or retrieve present UI controles when they exist.\r\n/**\r\n * darkSwitch\r\n * heatmap slider\r\n * new google.maps.places.Autocomplete\r\n * panButton and geolocation\r\n */\r\nfunction configUIControls () {\r\n  // First time visit: style map night or regular based on earlier preferences\r\n  const darkThemeSelected = localStorage.getItem('darkSwitch') !== null && localStorage.getItem('darkSwitch') === 'dark'\r\n  darkThemeSelected ? _styleItDark() : _styleItWhite()\r\n  // Define on toggle behaviour.\r\n  google.maps.event.addDomListener(__id('darkSwitch'), 'click', function () {\r\n    var toggle = localStorage.getItem('darkSwitch') !== null && localStorage.getItem('darkSwitch') === 'dark'\r\n    toggle ? _styleItWhite() : _styleItDark()\r\n  })\r\n\r\n  // Slider\r\n  const slider = __id('formControlRange')\r\n  const sliderForm = __id('formControlRange0')\r\n  let moving\r\n  if (!_isMobile) {\r\n    map.controls[google.maps.ControlPosition.TOP_LEFT].clear()\r\n    map.controls[google.maps.ControlPosition.TOP_LEFT].push(sliderForm)\r\n  }\r\n  slider.oninput = function () {\r\n    $('#rangeval').html(`Day ${slider.value}`)\r\n    moving = populateHeatMap(slider.value - 1)\r\n    if (!moving) {\r\n      slider.value = 1\r\n      $('#rangeval').html('Day 1')\r\n    }\r\n  }\r\n\r\n  // Create the autocompletion search bar if does not exist already\r\n  var input = __id('pac-input')\r\n  if (input == null) {\r\n    const div = document.createElement('INPUT')\r\n    div.id = 'pac-input'\r\n    div.className = 'controls'\r\n    div.type = 'text'\r\n    div.placeholder = 'Enter a location'\r\n    document.body.appendChild(div)\r\n    input = __id('pac-input')\r\n  }\r\n  if (!autocomplete) {\r\n    autocomplete = new google.maps.places.Autocomplete(input, _autocompleteOptions)\r\n    map.controls[google.maps.ControlPosition.TOP_CENTER].clear()\r\n    map.controls[google.maps.ControlPosition.TOP_CENTER].push(input)\r\n    autocomplete.bindTo('bounds', map)\r\n    // Specify just the place data fields that you need.\r\n    autocomplete.setFields(['place_id', 'geometry', 'name'])\r\n  }\r\n\r\n  // Geolocation\r\n  currentMarked = 'geolocated'\r\n  // Create Geolocation button if it does not exist\r\n  var panButton = __class('custom-map-control-button')[0]\r\n  if (panButton) {\r\n    return\r\n  }\r\n\r\n  var infoWindow = new google.maps.InfoWindow()\r\n  const locationButton = document.createElement('button')\r\n  locationButton.textContent = 'Go to Current Location'\r\n  locationButton.classList.add('custom-map-control-button')\r\n  map.controls[google.maps.ControlPosition.TOP_RIGHT].clear()\r\n  map.controls[google.maps.ControlPosition.TOP_RIGHT].push(locationButton)\r\n  locationButton.addEventListener('click', () => {\r\n    // Try HTML5 geolocation.\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          const pos = {\r\n            lat: position.coords.latitude,\r\n            lng: position.coords.longitude\r\n          }\r\n          infoWindow.setPosition(pos)\r\n          infoWindow.setContent('Location found.')\r\n          infoWindow.open(map)\r\n          map.setCenter(pos)\r\n          pos.name = 'Current place'\r\n          nearbyTriggeredRequest(pos)\r\n          __id('imgGrid').innerHTML = ''\r\n          showAlertsList(currObj)\r\n        },\r\n        () => {\r\n          handleLocationError(true, infoWindow, map.getCenter())\r\n        }\r\n      )\r\n    } else {\r\n      // Browser doesn't support Geolocation\r\n      handleLocationError(false, infoWindow, map.getCenter())\r\n    }\r\n  })\r\n}\r\n\r\n// Configure Google map URLs based on user interactions (successive right clicks on markers)\r\n// Called when a marker is right clicked\r\nfunction configURLsControls (marker) {\r\n  // Change marker icon between normal and black states using marker.setIcon\r\n  const newDest = `${marker.position.lat()},${marker.position.lng()}`\r\n  let controlUI\r\n  if (!directions.start_location) {\r\n    directions.start_location = newDest\r\n    marker.setIcon('https://www.google.com/mapfiles/marker_black.png')\r\n    return\r\n  }\r\n  if (!directions.end_location && (directions.start_location !== newDest)) {\r\n    directions.end_location = newDest\r\n    const link = `https://www.google.com/maps/dir/?api=1&origin=${directions.start_location}&destination=${directions.end_location}&travelmode=driving`\r\n    if (!__id('URL')) {\r\n      controlUI = document.createElement('div')\r\n      controlUI.setAttribute('id', 'URL')\r\n    } else {\r\n      controlUI = __id('URL')\r\n      controlUI.innerHTML = ''\r\n    }\r\n    const a = document.createElement('a')\r\n    const linkText = document.createTextNode('🔗Google Map\\'s directions')\r\n    a.appendChild(linkText)\r\n    a.title = 'Google Map'\r\n    a.href = link\r\n    a.target = '_blank'\r\n    a.style.cssText = 'background-color: #2a2a3c; color: #fff'\r\n    controlUI.appendChild(a)\r\n    map.controls[google.maps.ControlPosition.BOTTOM_CENTER].clear()\r\n    map.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(controlUI)\r\n    marker.setIcon('https://www.google.com/mapfiles/marker_black.png')\r\n    return\r\n  }\r\n  // Refresh DOM for all markers after 'marker.setIcon' has been called on some markers\r\n  markers.forEach(marker_ => {\r\n    // console.log(marker_.iconSrc)\r\n    marker_.setIcon(marker_.iconSrc)\r\n  })\r\n  // Create an URL in map's bottom\r\n  controlUI = __id('URL')\r\n  controlUI.innerHTML = ''\r\n  map.controls[google.maps.ControlPosition.BOTTOM_CENTER].clear()\r\n  map.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(controlUI)\r\n  directions = { start_location: undefined, end_location: undefined }\r\n}\r\n\r\n// Called once the user search for a city, look for weather cached data for today (local user time) for the city,\r\n// If not found, create an AJAX request for it\r\n/**\r\n * _showLoading(), _hideLoading()\r\n * _getWithExpiry(), _setWithExpiry()\r\n * \"nearby/\" is the main API in back-end\r\n * renderForecastDays()\r\n * initMap()\r\n */\r\nfunction nearbyRequest (place) {\r\n  _showLoading() // Block page while loading\r\n  const requestObject = JSON.stringify({\r\n    lat: place.geometry.location.lat(),\r\n    lng: place.geometry.location.lng(),\r\n    cityname: place.name,\r\n    language: language\r\n  })\r\n  fetch('nearby/' + requestObject, { localCache: true, cacheTTL: 5 }).then(function (response) {\r\n    return response.json()\r\n  }).then(function (data) {\r\n    currObj = new CurrentList(data.data)\r\n    __id('location').innerHTML = currObj.location\r\n    renderForecastDays(currObj.dailies)\r\n    initMap()\r\n    populateHeatMap(0)\r\n    _hideLoading() // Unblock page\r\n  })\r\n}\r\n// Same as nearbyRequest()\r\nfunction nearbyTriggeredRequest (place) {\r\n  _showLoading() // Block page while loading\r\n  const requestObject = JSON.stringify({\r\n    lat: place.lat,\r\n    lng: place.lng,\r\n    cityname: place.name,\r\n    language: language\r\n  })\r\n  fetch('nearby/' + requestObject, { localCache: true, cacheTTL: 5 }).then(function (response) {\r\n    return response.json()\r\n  }).then(function (data) {\r\n    currObj = new CurrentList(data.data)\r\n    __id('location').innerHTML = currObj.location\r\n    renderForecastDays(currObj.dailies)\r\n    initMap()\r\n    _hideLoading() // Unblock page\r\n  })\r\n}\r\n\r\n// Create an HTML panel containing weather alerts for all current cities\r\nfunction showAlertsList (currObj) {\r\n  if (!currObj.isValid) {\r\n    return\r\n  }\r\n  if (_isMobile) {\r\n    return\r\n  }\r\n  const cityNames = currObj.weather.map(elem => { return elem.cityName })\r\n  const alerts = currObj.weather.map((elem, idx) => { return elem.alerts ? { city: cityNames[idx], alert: elem.alerts[0] } : undefined }).filter(elem => { return elem })\r\n\r\n  let panel = document.createElement('ul')\r\n  // If the panel already exists, use it. Else, create it and add to the page.\r\n  if (__id('panel')) {\r\n    panel = __id('panel')\r\n    panel.style = 'overflow-y: scroll;'\r\n    // If panel is already open, close it\r\n    if (panel.classList.contains('open')) {\r\n      panel.classList.remove('open')\r\n    }\r\n  } else {\r\n    panel.setAttribute('id', 'panel')\r\n    const body = document.body\r\n    body.insertBefore(panel, body.childNodes[0])\r\n  }\r\n  map.controls[google.maps.ControlPosition.BOTTOM_LEFT].clear()\r\n  map.controls[google.maps.ControlPosition.BOTTOM_LEFT].push(panel)\r\n\r\n  // Clear the previous details\r\n  while (panel.lastChild) {\r\n    panel.removeChild(panel.lastChild)\r\n  }\r\n\r\n  if (!alerts || alerts.length === 0) {\r\n    panel.style.display = 'none'\r\n    return\r\n  }\r\n  panel.style.display = 'block'\r\n  alerts.forEach((alert) => {\r\n    // Add alert details with text formatting\r\n    const name = document.createElement('li')\r\n    name.classList.add('alert')\r\n    name.textContent = alert.city\r\n    panel.appendChild(name)\r\n    const alertContent = document.createElement('p')\r\n    alertContent.classList.add('alertContent')\r\n    alertContent.textContent = alert.alert.event\r\n    panel.appendChild(alertContent)\r\n  })\r\n  // Open the panel\r\n  panel.classList.add('open')\r\n}\r\n\r\n/**\r\n * new HeatmapOverlay()\r\n * map getScale() on weather\r\n */\r\nlet heatmap\r\nlet heatMapData\r\nlet temp\r\nconst getScale = (min, max, value) => Math.floor(5 * (value - min) / (max - min))\r\nfunction populateHeatMap (day) {\r\n  if (!currObj.isValid) {\r\n    return false\r\n  }\r\n  let temps = currObj.weather.map(a => { return a.daily[day].temp.min })\r\n  const tempsMax = Math.max(...temps)\r\n  const tempsMin = Math.min(...temps)\r\n  temps = temps.map(a => { return getScale(tempsMin, tempsMax, a) })\r\n  temp = []\r\n  temp = currObj.weather.map((a, idx) => { return { location: new google.maps.LatLng(a.lat, a.lon), weight: temps[idx] } })\r\n  heatMapData = new google.maps.MVCArray(temp)\r\n  if (!heatmap) {\r\n    heatmap = new google.maps.visualization.HeatmapLayer({\r\n      data: heatMapData,\r\n      radius: 150,\r\n      opacity: 0.5\r\n    })\r\n    heatmap.setMap(map)\r\n  } else {\r\n    heatmap.set('data', heatMapData)\r\n    // heatmap.set('opacity', 0.5)\r\n    // heatmap.set('radius', 150)\r\n  }\r\n  return true\r\n}\r\n\r\nArray.range = function(from, to, step, prec) {\r\n  if (typeof from === 'number') {\r\n    const A = [from]\r\n    step = typeof step === 'number' ? Math.abs(step) : 1\r\n    if (!prec) {\r\n      prec = (from + step) % 1 ? String((from + step) % 1).length + 1 : 0\r\n    }\r\n    if (from > to) {\r\n      while (+(from -= step).toFixed(prec) >= to) A.push(+from.toFixed(prec))\r\n    } else {\r\n      while (+(from += step).toFixed(prec) <= to) A.push(+from.toFixed(prec))\r\n    }\r\n    return A\r\n  }\r\n}\r\n\r\n// Create and Update the HTML list of div cards holding a list of weather information for one city in a week\r\n// Fill __currentSpokenForecast with a transcript for Weather forecast\r\n// hueColors: calculated background color based on the current tempreture and all weather average\r\nlet lastIcon\r\nfunction renderForecastDays (dailies) {\r\n  // console.log(\"renderForecastDays\");\r\n  // console.log(JSON.stringify(dailies));\r\n  dailies.sort(function (first, second) {\r\n    return second.dt - first.dt\r\n  })\r\n  const weekdayNames = _weekdaysLangs(language)\r\n  lastIcon = `url(https://openweathermap.org/img/wn/${dailies[dailies.length - 1].weather[0].icon || 'na'}.png)`\r\n  const choiceTheme = localStorage.getItem('themeSwitch') !== null && localStorage.getItem('themeSwitch') === 'true'\r\n  if (choiceTheme) {\r\n    document.body.style.backgroundImage = lastIcon\r\n    document.documentElement.style.backgroundImage = lastIcon\r\n  }\r\n  __id('forecast-items').innerHTML = ''\r\n  const maxTemp = Math.max(...dailies.map((item) => { return item.temp.max }))\r\n  const minTemp = Math.min(...dailies.map((item) => { return item.temp.min }))\r\n  const range = Array.range(minTemp, maxTemp, 0.5, 1)\r\n  let colorScale\r\n  dailies.forEach(function (period, co) {\r\n    const d = new Date(0)\r\n    d.setUTCSeconds(period.dt)\r\n    const ISODate = d.toISOString().slice(5, 10)\r\n    const dayName = weekdayNames[d.getDay()] // new Date(period.dateTimeISO).getDay()\r\n    const iconSrc = `https://openweathermap.org/img/wn/${period.weather[0].icon || 'na'}@4x.png`\r\n    const maxTempF = period.temp.max || 'N/A'\r\n    const minTempF = period.temp.min || 'N/A'\r\n    // const averageTemp = (maxTempF + minTempF) / 2\r\n    let description = period.weather[0].description || 'N/A'\r\n    let sunrise, sunset, humidity, pressure, wind_speed\r\n    ({ sunrise, sunset, humidity, pressure, wind_speed } = period)\r\n    sunrise = new Date(sunrise * 1000).toLocaleTimeString('en-GB').slice(0, 5)\r\n    sunset = new Date(sunset * 1000).toLocaleTimeString('en-GB').slice(0, 5)\r\n    description = description.charAt(0).toUpperCase() + description.slice(1)\r\n    // const hue_ = ((maxTempF - minTemp) / (maxTemp - minTemp)) * 240\r\n    const hueMax = (1.0 - (maxTempF / maxTemp)) * 240\r\n    const hueMin = (1.0 - (minTempF / maxTemp)) * 240\r\n    const stepMin = range.filter(n => { return minTempF > n }).length\r\n    const stepMax = range.filter(n => { return maxTempF > n }).length\r\n    colorScale = colorScale ? colorScale : range.map(step => { return `hsl( ${((1.0 - (step / maxTemp)) * 240)} , 90%, 80%)` })\r\n    let hueColors = `; border-radius: 5px; border: 5px solid rgb(122 122 122 / 30%); background: linear-gradient(70deg, hsl( ${hueMin} , 90%, 80%) 40%, hsl( ${hueMax} , 90%, 80%) 40%)`\r\n    let currentMarkedId = 'city-' + currentMarked.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '').replace(' ', '-').toLowerCase()\r\n    currentMarkedId = `checkId${currentMarkedId}`\r\n    const card = new TemperatureCard(language, period, maxTemp, minTemp, currentMarked, co)\r\n    __id('forecast-items').insertAdjacentHTML('afterbegin', card.html())\r\n  })\r\n  const minMaxBtn = '<div class=\"pull-right\"><button type=\"button\" class=\"btn btn-light\" id=\"startover\" onclick=\"minMax()\">Min-Max</button></div>'\r\n  __id('forecast-items').insertAdjacentHTML('afterbegin', minMaxBtn)\r\n\r\n  dailies.reverse()\r\n  __currentSpokenForecast = 'Now, let’s see what the weather is like in ' + __currentSpokenCity + ': '\r\n  dailies.forEach(function (period, key) {\r\n    const toPrecision = x => Number.parseFloat(x).toPrecision(1)\r\n    const d = new Date(0)\r\n    d.setUTCSeconds(period.dt)\r\n    const dayName = weekdayNames[d.getDay()] // new Date(period.dateTimeISO).getDay()\r\n    const maxTempF = period.temp.max || 'N/A'\r\n    const minTempF = period.temp.min || 'N/A'\r\n    const description = period.weather[0].description || 'N/A'\r\n    // transcript\r\n    let chain = ''\r\n    switch (key) {\r\n      case 0:\r\n        chain = 'Today is '\r\n        break\r\n      case 1:\r\n        chain = 'Tomorrow is '\r\n        break\r\n      default:\r\n        (dailies.length - 1 === key) ? chain = 'Finally, on ' : chain = 'On '\r\n        break\r\n    }\r\n    __currentSpokenForecast += `${chain} ${dayName}, ${d.toDateString().slice(4, 10)}, it feels like ${description} with a maximum temperature of ${toPrecision(maxTempF)}°C and a minimum of ${toPrecision(minTempF)}°. `\r\n  })\r\n}\r\n\r\n// Create and Update the HTML div card holding pollution information and scale for one city for today only\r\nfunction renderPollution (pollution) {\r\n  const aqiInterpretation = _aqiLangs(language)\r\n  const aqi = pollution.list[0].main.aqi\r\n  const d = new Date(0)\r\n  d.setUTCSeconds(pollution.list[0].dt)\r\n  const ISODate = d.toISOString().slice(0, 10)\r\n  const { co, no, no2 } = pollution.list[0].components\r\n  const aqiStyle = '; border-radius: 5px; border: 5px solid rgb(122 122 122 / 30%); background-color: '\r\n  const card = new AqiCard(aqiStyle, aqiInterpretation, aqi, ISODate, co, no, no2)\r\n  __id('forecast-items').insertAdjacentHTML('afterbegin', card.html())\r\n}\r\n\r\n// #getMarkers, #setMapOnAll, #clearMarkers, #showMarkers are helpers to refresh markers.\r\n// Detach old features then attach new markers to map\r\nfunction getMarkers () {\r\n  if (!currObj.isValid) {\r\n    return\r\n  }\r\n  center = {\r\n    lat: currObj.coordinates[1],\r\n    lng: currObj.coordinates[0]\r\n  }\r\n  var bounds = new google.maps.LatLngBounds()\r\n\r\n  let idx = 0\r\n  const COLORS = ['blue', 'purple', 'green', 'yellow', 'red']\r\n  const getColor = (min, max, value) => COLORS[Math.floor(COLORS.length * (value - min) / (max - min))]\r\n\r\n  const maxTemp = Math.max(...currObj.weather.map((item) => { return item.daily[0].temp.max }))\r\n  const minTemp = Math.min(...currObj.weather.map((item) => { return item.daily[0].temp.min }))\r\n  map.data.forEach(function (feature) {\r\n    // if (feature.getGeometry().getType() === 'Polygon') {\r\n    //     feature.getGeometry().forEachLatLng(function(latlng) {\r\n    //         bounds.extend(latlng);\r\n    //     });\r\n    // } else\r\n    if (feature.getGeometry().getType() === 'Point') {\r\n      const todayTempCeil = (currObj.weather[idx].daily[0].temp.max)\r\n      const todayTempFloor = (currObj.weather[idx++].daily[0].temp.min)\r\n      const todayTemp = (todayTempCeil + todayTempFloor) / 2\r\n      const LatLng = feature.getGeometry().get()\r\n      const marker = new google.maps.Marker({\r\n        position: LatLng,\r\n        map: map,\r\n        animation: google.maps.Animation.DROP,\r\n        title: feature.i.name,\r\n        iconSrc: `https://maps.google.com/mapfiles/ms/icons/${getColor(minTemp, maxTemp, todayTemp)}-dot.png`\r\n      })\r\n      // console.log('minTemp', minTemp, 'maxTemp', maxTemp, 'todayTemp', todayTemp)\r\n      marker.setIcon(`https://maps.google.com/mapfiles/ms/icons/${getColor(minTemp, maxTemp, todayTemp)}-dot.png`)\r\n      markers.push(marker)\r\n      // remove previous markers from map.data\r\n      map.data.remove(feature)\r\n    }\r\n  })\r\n}\r\n\r\n// Sets the map on all markers in the array.\r\nfunction setMapOnAll (map) {\r\n  for (let i = 0; i < markers.length; i++) {\r\n    markers[i].setMap(map)\r\n  }\r\n}\r\n\r\n// Removes the markers from the map, but keeps them in the array.\r\nfunction clearMarkers () {\r\n  for (let i = 0; i < markers.length; i++) {\r\n    markers[i].setVisible(false)\r\n  }\r\n  setMapOnAll(null)\r\n  markers = []\r\n}\r\n\r\n// Shows any markers currently in the array.\r\nfunction showMarkers () {\r\n  for (let i = 0; i < markers.length; i++) {\r\n    markers[i].setVisible(true)\r\n  }\r\n  setMapOnAll(map)\r\n}\r\n\r\n// Get pictures for seached place\r\n/**\r\n * new google.maps.places.PlacesService\r\n * _myStorage.getItem(place), _myStorage.setItem(place, urls)\r\n * populate pictures on featured_pictures div\r\n */\r\nfunction getPicture (place) {\r\n  const [success, fail] = _picturesLangs(language)\r\n  __id('imgGrid').innerHTML = ''\r\n  let cache = _myStorage.getItem(place)\r\n  if (cache) {\r\n    cache = JSON.parse(cache)\r\n    for (let i = 0; i < cache.photos.length; i++) {\r\n      __id('imgGrid').innerHTML += '<div class=\"featured_pictures\"><img src=\"' + cache.photos[i] + '\" alt=\"' + cache.names[i] + '\" /></div>'\r\n    }\r\n    return\r\n  }\r\n  const service = new google.maps.places.PlacesService(map)\r\n  const request = {\r\n    location: map.getCenter(),\r\n    radius: '3000',\r\n    query: place,\r\n    type: ['park'] //, 'mosque', 'airport', 'amusement_park', 'art_gallery', 'casino', 'church', 'museum', 'park', 'synagogue', 'tourist_attraction', 'university']\r\n  }\r\n  let called = false\r\n  service.nearbySearch(request, callback)\r\n  // Checks that the PlacesServiceStatus is OK, and adds a marker\r\n  // using the place ID and location from the PlacesService.\r\n  function callback (results, status) {\r\n    if (called) {\r\n      return\r\n    }\r\n    called = true\r\n    __id('gallery').innerHTML = success(place)\r\n    if (status === google.maps.places.PlacesServiceStatus.OK) {\r\n      const photos = results.map(elem => { return elem.photos ? elem.photos[0].getUrl() : undefined }).filter(elem => { return elem })\r\n      const names = results.map(elem => { return elem.name })\r\n      if (!photos.length) {\r\n        __id('gallery').innerHTML = fail(place)\r\n        return\r\n      }\r\n      _myStorage.setItem(place, JSON.stringify({ photos: photos, names: names }))\r\n      for (let i = 0; i < photos.length; i++) {\r\n        __id('imgGrid').innerHTML += '<div class=\"featured_pictures\"><img src=\"' + photos[i] + '\" alt=\"' + names[i] + '\" /></div>'\r\n      }\r\n    } else {\r\n      __id('gallery').innerHTML = fail(place)\r\n    }\r\n  }\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', function () {\r\n  setTimeout(function () {\r\n    const mapScripts = document.getElementsByTagName('script')\r\n    language = [...mapScripts].map(ss => { return ss.getAttribute('lang') }).filter(Boolean)[0]\r\n    const centerLocation = [...mapScripts].map(ss => { return ss.getAttribute('centerLocation') }).filter(Boolean)[0]\r\n    const pos = {\r\n      lat: center.lat,\r\n      lng: center.lng\r\n    }\r\n    map.setCenter(pos)\r\n    pos.name = centerLocation.charAt(0).toUpperCase() + centerLocation.slice(1)\r\n    nearbyTriggeredRequest(pos)\r\n    __id('imgGrid').innerHTML = ''\r\n  }, 2000)\r\n}, false)\r\n"]}