{"version":3,"sources":["js_variables.js","lang_mappings.js","html_holders.js","accessibility.js","GMap.js"],"names":["__id","id","document","getElementById","__class","classs","getElementsByClassName","_myStorage","window","localStorage","_isMobile","_getScriptParams","params","mapScripts","getElementsByTagName","map","param","ss","getAttribute","filter","Boolean","test","navigator","userAgent","substr","collapseBtn1","onclick","classList","toggle","collapseBtn2","_styles","default","hide","featureType","stylers","visibility","elementType","night","color","pSBC","p","c0","c1","l","r","g","b","P","f","t","h","i","parseInt","m","Math","round","a","this","pSBCr","d","n","length","x","split","slice","parseFloat","toString","undefined","cardsColors","_styleItDark","documentElement","style","backgroundColor","setOptions","styles","src","Array","from","card","forEach","_styleItWhite","idx","_showLoading","add","_hideLoading","remove","_setWithExpiry","key","value","now","Date","item","expiry","day","getDay","month","getMonth","year","getFullYear","setItem","JSON","stringify","_getWithExpiry","itemStr","getItem","parse","removeItem","addEventListener","checked","body","backgroundImage","_autocompleteOptions","types","minMax","querySelectorAll","firstElementChild","className","indexOf","children","replace","th","innerHTML","allowDrop","ev","preventDefault","drag","dataTransfer","setData","target","generateCard","cardId","toBe","cloneNode","title","charAt","toUpperCase","join","setAttribute","childNodes","insertAdjacentHTML","button","createElement","shareIt","appendChild","drop","getData","autoDrag","autodrag_id","location","emptyIt","elements","prototype","call","node","parentNode","removeChild","card_id","dd","domtoimage","toBlob","width","clientWidth","height","clientHeight","bgcolor","tagName","transform","transformOrigin","then","blob","file","File","type","data","text","files","canShare","share","console","log","offScene","display","initScene","forced","todayWeather","done","initRainScene","initSunScene","fetch","removeFromStorage","storage","cacheKey","cacheResponse","hourstl","response","cres","clone","dataType","headers","get","toLowerCase","e","self","url","settings","ttl","TypeError","getStorage","localCache","cacheTTL","Content-type","genCacheKey","cacheValid","isCacheValid","Response","status","statusText","Content-Type","Promise","resolve","reject","provideResponse","bind","lang","require","_weekdaysLangs","language","ar","weekdays","en","fr","Error","_aqiLangs","aqi","_picturesLangs","success","fail","pictures","AqiCard","[object Object]","today","co","no","no2","1","2","3","4","5","aqiInterpretation","setUTCSeconds","ISODate","toISOString","dayName","coo","trim","TemperatureCard","period","maxTemp","minTemp","currentMarked","dt","iconSrc","weather","icon","maxTempF","temp","max","minTempF","min","s","description","sunrise","toLocaleTimeString","sunset","humidity","pressure","wind_speed","hueMax","normalize","range","stepMin","stepMax","step","showClass","collapseIcon","autoDragBtn","getCurrentMarkedId","getHueColors","getColorScaleHeads","_adsHolder","company","__currentSpokenCity","paragraph","__currentSpokenForecast","searchPlace","autocompleteService","google","maps","places","AutocompleteService","placesService","PlacesService","getPlacePredictions","input","predictions","PlacesServiceStatus","OK","speak","terms","getDetails","placeId","place_id","placeResults","nearbyRequest","setTimeout","synth","SpeechRecognition","recognition","speaking","error","SpeechSynthesisUtterance","onend","event","onerror","_fireAccessFunctions","first","justRefresh","speechSynthesis","webkitSpeechRecognition","continuous","interimResults","maxAlternatives","onkeyup","start","cancel","onresult","city","results","transcript","confidence","onspeechend","stop","onnomatch","_initAccessibility","choiceViaLS","toDateString","CurrentList","isFeatures","isWeather","isValid","currentList","pollution","features","properties","name","dailies","daily","coordinates","geometry","autocomplete","heatmap","heatMapData","currObj","markers","directions","start_location","end_location","last","getTime","center","lat","lng","refreshCenter","initMap","feature","trigger","Map","zoom","rotateControl","mapTypeControl","streetViewControl","configUIControls","addGeoJson","clearMarkers","getMarkers","showMarkers","setStyle","strokeColor","bounds","LatLngBounds","getGeometry","forEachLatLng","latlng","extend","fitBounds","setCenter","setZoom","showAlertsList","populateHeatMap","infowindow","InfoWindow","infowindowContent","infowindowContentPrime","setContent","marker","Marker","animation","Animation","DROP","latestClicked","addListener","close","open","getAnimation","setAnimation","marker_","BOUNCE","cityWeather","find","cityName","cityPollution","renderForecastDays","renderPollution","configURLsControls","place","getPlace","viewport","setPlace","setVisible","namedItem","textContent","formatted_address","getPicture","refreshDzBorder","handleLocationError","browserHasGeolocation","infoWindow","pos","setPosition","addDomListener","slider","sliderForm","moving","controls","ControlPosition","TOP_LEFT","clear","push","oninput","$","html","div","placeholder","Autocomplete","TOP_CENTER","bindTo","setFields","locationButton","TOP_RIGHT","geolocation","getCurrentPosition","position","coords","latitude","longitude","nearbyTriggeredRequest","getCenter","newDest","controlUI","setIcon","link","linkText","createTextNode","href","cssText","BOTTOM_CENTER","requestObject","cityname","json","cityNames","elem","alerts","alert","panel","contains","insertBefore","BOTTOM_LEFT","lastChild","alertContent","getScale","floor","temps","tempsMax","tempsMin","LatLng","lon","weight","MVCArray","set","visualization","HeatmapLayer","radius","opacity","setMap","lastIcon","borderData","sort","second","weekdayNames","reverse","toPrecision","Number","chain","list","main","components","COLORS","getColor","getType","todayTemp","setMapOnAll","cache","photos","names","service","request","query","called","nearbySearch","getUrl","hash","Data","loadGeoJson","fillColor","fillOpacity","to","prec","A","abs","String","toFixed","centerLocation"],"mappings":"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","file":"all-c1dda7503b.js","sourcesContent":["/* eslint-disable no-unused-vars */\n\n// js_variables ==> GMap\n// _myStorage, _styles, _autocompleteOptions\n// _styleItDark(), _styleItWhite(), _showLoading(), _hideLoading(),\n// _setWithExpiry(), _getWithExpiry(), _fireAccessFunctions()\n\nfunction __id (id) { return document.getElementById(id) }\nfunction __class (classs) { return document.getElementsByClassName(classs) }\n\nconst _myStorage = window.localStorage\n\nlet _isMobile = false\n// device detection\nif (/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent) ||\n    /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(navigator.userAgent.substr(0, 4))) {\n  _isMobile = true\n}\n\nfunction _getScriptParams (params) {\n  const mapScripts = document.getElementsByTagName('script')\n  return params.map(param => {\n    return [...mapScripts].map(ss => { return ss.getAttribute(param) }).filter(Boolean)[0]\n  })\n}\n\nlet collapseBtn1 = __id('collapse1')\ncollapseBtn1.onclick = function () { collapseBtn1.classList.toggle('active') }\nlet collapseBtn2 = __id('collapse2')\ncollapseBtn2.onclick = function () { collapseBtn2.classList.toggle('active') }\n\n// less styling, setting business positions off and transit off\nconst _styles = {\n  default: [],\n  hide: [\n    {\n      featureType: 'poi.business',\n      stylers: [{ visibility: 'off' }]\n    },\n    {\n      featureType: 'transit',\n      elementType: 'labels.icon',\n      stylers: [{ visibility: 'off' }]\n    },\n    {\n      featureType: 'poi',\n      elementType: 'labels',\n      stylers: [\n        { visibility: 'off' }\n      ]\n    }\n  ],\n  night: [\n    { elementType: 'geometry', stylers: [{ color: '#242f3e' }] },\n    { elementType: 'labels.text.stroke', stylers: [{ color: '#242f3e' }] },\n    { elementType: 'labels.text.fill', stylers: [{ color: '#746855' }] },\n    {\n      featureType: 'administrative.locality',\n      elementType: 'labels.text.fill',\n      stylers: [{ color: '#d59563' }]\n    },\n    {\n      featureType: 'poi',\n      elementType: 'labels.text.fill',\n      stylers: [{ color: '#d59563' }]\n    },\n    {\n      featureType: 'poi.park',\n      elementType: 'geometry',\n      stylers: [{ color: '#263c3f' }]\n    },\n    {\n      featureType: 'poi.park',\n      elementType: 'labels.text.fill',\n      stylers: [{ color: '#6b9a76' }]\n    },\n    {\n      featureType: 'road',\n      elementType: 'geometry',\n      stylers: [{ color: '#38414e' }]\n    },\n    {\n      featureType: 'road',\n      elementType: 'geometry.stroke',\n      stylers: [{ color: '#212a37' }]\n    },\n    {\n      featureType: 'road',\n      elementType: 'labels.text.fill',\n      stylers: [{ color: '#9ca5b3' }]\n    },\n    {\n      featureType: 'road.highway',\n      elementType: 'geometry',\n      stylers: [{ color: '#746855' }]\n    },\n    {\n      featureType: 'road.highway',\n      elementType: 'geometry.stroke',\n      stylers: [{ color: '#1f2835' }]\n    },\n    {\n      featureType: 'road.highway',\n      elementType: 'labels.text.fill',\n      stylers: [{ color: '#f3d19c' }]\n    },\n    {\n      featureType: 'transit',\n      elementType: 'geometry',\n      stylers: [{ color: '#2f3948' }]\n    },\n    {\n      featureType: 'transit.station',\n      elementType: 'labels.text.fill',\n      stylers: [{ color: '#d59563' }]\n    },\n    {\n      featureType: 'water',\n      elementType: 'geometry',\n      stylers: [{ color: '#17263c' }]\n    },\n    {\n      featureType: 'water',\n      elementType: 'labels.text.fill',\n      stylers: [{ color: '#515c6d' }]\n    },\n    {\n      featureType: 'water',\n      elementType: 'labels.text.stroke',\n      stylers: [{ color: '#17263c' }]\n    },\n    {\n      featureType: 'poi.business',\n      stylers: [{ visibility: 'off' }]\n    },\n    {\n      featureType: 'transit',\n      elementType: 'labels.icon',\n      stylers: [{ visibility: 'off' }]\n    }\n  ]\n}\n// Copyright of PimpTrizkit taken from https://github.com/PimpTrizkit/PJs/wiki/12.-Shade,-Blend-and-Convert-a-Web-Color-(pSBC.js)\n// Version 4.0\nconst pSBC = (p, c0, c1, l) => {\n  let r, g, b, P, f, t, h, i = parseInt, m = Math.round, a = typeof (c1) == 'string'\n  if (typeof (p) != 'number' || p < -1 || p > 1 || typeof (c0) != 'string' || (c0[0] != 'r' && c0[0] != '#') || (c1 && !a)) return null\n  if (!this.pSBCr) this.pSBCr = (d) => {\n    let n = d.length, x = {}\n    if (n > 9) {\n      [r, g, b, a] = d = d.split(','), n = d.length\n      if (n < 3 || n > 4) return null\n      x.r = i(r[3] == 'a' ? r.slice(5) : r.slice(4)), x.g = i(g), x.b = i(b), x.a = a ? parseFloat(a) : -1\n    } else {\n      if (n == 8 || n == 6 || n < 4) return null\n      if (n < 6) d = '#' + d[1] + d[1] + d[2] + d[2] + d[3] + d[3] + (n > 4 ? d[4] + d[4] : '')\n      d = i(d.slice(1), 16)\n      if (n == 9 || n == 5) x.r = d >> 24 & 255, x.g = d >> 16 & 255, x.b = d >> 8 & 255, x.a = m((d & 255) / 0.255) / 1000\n      else x.r = d >> 16, x.g = d >> 8 & 255, x.b = d & 255, x.a = -1\n    } return x\n  }\n  h = c0.length > 9, h = a ? c1.length > 9 ? true : c1 == 'c' ? !h : false : h, f = this.pSBCr(c0), P = p < 0, t = c1 && c1 != 'c' ? this.pSBCr(c1) : P ? { r: 0, g: 0, b: 0, a: -1 } : { r: 255, g: 255, b: 255, a: -1 }, p = P ? p * -1 : p, P = 1 - p\n  if (!f || !t) return null\n  if (l) r = m(P * f.r + p * t.r), g = m(P * f.g + p * t.g), b = m(P * f.b + p * t.b)\n  else r = m((P * f.r ** 2 + p * t.r ** 2) ** 0.5), g = m((P * f.g ** 2 + p * t.g ** 2) ** 0.5), b = m((P * f.b ** 2 + p * t.b ** 2) ** 0.5)\n  a = f.a, t = t.a, f = a >= 0 || t >= 0, a = f ? a < 0 ? t : t < 0 ? a : a * P + t * p : 0\n  if (h) return 'rgb' + (f ? 'a(' : '(') + r + ',' + g + ',' + b + (f ? ',' + m(a * 1000) / 1000 : '') + ')'\n  else return '#' + (4294967296 + r * 16777216 + g * 65536 + b * 256 + (f ? m(a * 255) : 0)).toString(16).slice(1, f ? undefined : -2)\n}\nvar cardsColors\n\nfunction _styleItDark () {\n  document.documentElement.style.backgroundColor = '#111'\n  map.setOptions({ styles: _styles.night })\n  __id('copyright_google').src = './copyright/powered_by_google_on_non_white_hdpi.png'\n  if (!cardsColors) {\n    cardsColors = Array.from(__class('card')).map(card => { return card.style.backgroundColor })\n    cardsColors = [...cardsColors]\n  }\n\n  Array.from(__class('card')).forEach(card => {\n    card.style.backgroundColor = pSBC(-0.2, card.style.backgroundColor)\n  })\n\n  __id('logo').src = './img/weather_venue_856-8_on_black.png'\n}\n\nfunction _styleItWhite () {\n  document.documentElement.style.backgroundColor = '#eee'\n  map.setOptions({ styles: _styles.hide })\n  __id('copyright_google').src = './copyright/powered_by_google_on_white_hdpi.png'\n  if (cardsColors) {\n    Array.from(__class('card')).forEach(function (card, idx) {\n      card.style.backgroundColor = cardsColors[idx]\n    })\n  }\n  __id('logo').src = './img/weather_venue_856-8.png'\n}\n\nfunction _showLoading () {\n  __id('spinner-back').classList.add('show')\n  __id('spinner-front').classList.add('show')\n}\n\nfunction _hideLoading () {\n  __id('spinner-back').classList.remove('show')\n  __id('spinner-front').classList.remove('show')\n}\n\nfunction _setWithExpiry (key, value) {\n  const now = new Date()\n  const day = { day: now.getDay(), month: now.getMonth(), year: now.getFullYear() }\n\n  // `item` is an object which contains the original value\n  // as well as today's date\n  const item = {\n    value: value,\n    expiry: day\n  }\n  _myStorage.setItem(key, JSON.stringify(item))\n}\n\nfunction _getWithExpiry (key) {\n  const itemStr = _myStorage.getItem(key)\n  // if the item doesn't exist, return null\n  if (!itemStr) {\n    return null\n  }\n  const item = JSON.parse(itemStr)\n  const now = new Date()\n\n  // compare the expiry time of the item with the current time\n  if (now.getDay() !== item.expiry.day || now.getMonth() !== item.expiry.month || now.getFullYear() !== item.expiry.year) {\n    // If the item generated today, delete the item from storage\n    // and return null\n    _myStorage.removeItem(key)\n    return null\n  }\n  return item.value\n}\n\n__id('themeSwitch').addEventListener('click', function () {\n  const isChecked = __id('themeSwitch').checked\n  const value = isChecked ? 1 : 0\n  value ? localStorage.setItem('themeSwitch', 'true') : localStorage.removeItem('themeSwitch')\n  if (!value) {\n    document.body.style.backgroundImage = ''\n    document.documentElement.style.backgroundImage = ''\n  }\n})\n\nconst _autocompleteOptions = {\n  types: ['(cities)']\n  // componentRestrictions: {country: \"us\"}\n}\n\n// Toggle cards background color between minimum and maximum hue colors\nfunction minMax () {\n  const cards = Array.from(document.querySelectorAll('[id^=\"checkIdcity\"]')).map(a => { return a.firstElementChild }).filter(a => { return a.className === 'card'}).slice(0, 8)\n  cards.forEach(card => {\n    const style = card.style.backgroundImage\n    if (style.indexOf('40%') > -1) {\n      __id('minmax').children[0].style = 'color:blue'\n      __id('minmax').children[1].style = 'color:black'\n      card.style.backgroundImage = style.replace('40%', '100%').replace('40%', '100%')\n      Array.from(document.body.getElementsByTagName('th')).slice(0, 176).forEach(th => {\n        th.innerHTML = th.innerHTML.replace('ᐁ', '▼')\n        th.innerHTML = th.innerHTML.replace('▲', 'ᐃ')\n      })\n      return\n    }\n    if (style.indexOf('0.01%') > -1) {\n      __id('minmax').children[0].style = 'color:black'\n      __id('minmax').children[1].style = 'color:black'\n      card.style.backgroundImage = style.replace('0.01%', '40%').replace('0.01%', '40%')\n      Array.from(document.body.getElementsByTagName('th')).slice(0, 176).forEach(th => {\n        th.innerHTML = th.innerHTML.replace('▼', 'ᐁ')\n        th.innerHTML = th.innerHTML.replace('▲', 'ᐃ')\n      })\n      return\n    }\n    if (style.indexOf('100%') > -1) {\n      __id('minmax').children[0].style = 'color:black'\n      __id('minmax').children[1].style = 'color:red'\n      card.style.backgroundImage = style.replace('100%', '0.01%').replace('100%', '0.01%')\n      Array.from(document.body.getElementsByTagName('th')).slice(0, 176).forEach(th => {\n        th.innerHTML = th.innerHTML.replace('▼', 'ᐁ')\n        th.innerHTML = th.innerHTML.replace('ᐃ', '▲')\n      })\n    }\n  })\n}\n\n// Comparision\nfunction allowDrop (ev) {\n  ev.preventDefault()\n}\n\nfunction drag (ev) {\n  ev.dataTransfer.setData('text', ev.target.id)\n}\n\nfunction generateCard (cardId) {\n  const toBe = __id(cardId).cloneNode(true)\n  const title = `<h3>${cardId.split('-').slice(1, -1).map(a => { return a.charAt(0).toUpperCase() + a.slice(1) }).join('-')}</h3>`\n  toBe.setAttribute('id', cardId + '_clone')\n  toBe.setAttribute('draggable', false)\n  // toBe.style.cursor =''\n  toBe.childNodes[1].firstElementChild.setAttribute('href', '')\n  toBe.insertAdjacentHTML('afterbegin', title)\n  if (_isMobile) {\n    const button = document.createElement('button')\n    button.innerHTML = '<i class=\"bi bi-share\"></i>'\n    button.classList.add('btn-sm')\n    button.classList.add('btn-light')\n    button.onclick = function () {\n      shareIt(cardId + '_clone')\n      return false\n    }\n    toBe.appendChild(button)\n  }\n  return toBe\n}\n\nfunction drop (ev) {\n  ev.preventDefault()\n  const data = ev.dataTransfer.getData('text')\n  const toBe = generateCard(data)\n  ev.target.appendChild(toBe)\n}\n\nfunction autoDrag (autodrag_id) {\n  __id(autodrag_id).remove()\n  const data = autodrag_id.slice(0, -9)\n  const toBe = generateCard(data)\n  toBe.childNodes[4].remove()\n  __id('comparision-items').appendChild(toBe)\n  window.location = '#comparision-items'\n}\n\nfunction emptyIt() {\n  const elements = document.querySelectorAll('[id*=\"_clone\"]')\n  Array.prototype.forEach.call(elements, function(node) {\n    node.parentNode.removeChild(node)\n  })\n}\n\nfunction shareIt(card_id) {\n  const dd = __id(card_id)\n  // dd.style.backgroundColor =\"white\"\n  const scale = 2\n  // dd.childNodes[4].remove()\n  domtoimage.toBlob(dd, {\n    width: dd.clientWidth * scale,\n    height: dd.clientHeight * scale,\n    bgcolor: 'white',\n    filter: function (node) { return (node.tagName !== 'BUTTON') },\n    style: {\n      transform: 'scale(' + scale + ')',\n      transformOrigin: 'top left'\n    }\n  }).then(function (blob) {\n    const file = new File([blob], 'WeatherVenue.png', { type: blob.type })\n    const data = {\n      title: 'WeatherVenue.com',\n      text: `Weather in ${card_id.split('_')[0].split('-')[1]}`,\n      files: [file]\n    }\n    if(navigator.canShare && navigator.canShare(data)) {\n      navigator.share(data)\n    } else {\n      console.log('cannot share ')\n    }\n  })\n}\n\n/**\n * Copyright (c) Christopher Keefer, 2016.\n * https://github.com/SaneMethod/fetchCache\n *\n * Override fetch in the global context to allow us to cache the response to fetch in a Storage interface\n * implementing object (such as localStorage).\n */\n(function (fetch) {\n  /* If the context doesn't support fetch, we won't attempt to patch in our\n   caching using fetch, for obvious reasons. */\n  if (!fetch) return\n\n  /**\n   * Generate the cache key under which to store the local data - either the cache key supplied,\n   * or one generated from the url, the Content-type header (if specified) and the body (if specified).\n   *\n   * @returns {string}\n   */\n  function genCacheKey(url, settings) {\n    var {headers:{'Content-type': type}} = ('headers' in settings) ? settings : {headers: {}},\n      {body} = settings\n\n    return settings.cacheKey || url + (type || '') + (body || '')\n  }\n\n  /**\n   * Determine whether we're using localStorage or, if the user has specified something other than a boolean\n   * value for options.localCache, whether the value appears to satisfy the plugin's requirements.\n   * Otherwise, throw a new TypeError indicating what type of value we expect.\n   *\n   * @param {boolean|object} storage\n   * @returns {boolean|object}\n   */\n  function getStorage(storage) {\n    if (!storage) return false\n    if (storage === true) return self.localStorage\n    if (typeof storage === 'object' && 'getItem' in storage &&\n          'removeItem' in storage && 'setItem' in storage) {\n      return storage\n    }\n    throw new TypeError('localCache must either be a boolean value, ' +\n          'or an object which implements the Storage interface.')\n  }\n\n  /**\n   * Remove the item specified by cacheKey and its attendant meta items from storage.\n   *\n   * @param {Storage|object} storage\n   * @param {string} cacheKey\n   */\n  function removeFromStorage(storage, cacheKey) {\n    storage.removeItem(cacheKey)\n    storage.removeItem(cacheKey + 'cachettl')\n    storage.removeItem(cacheKey + 'dataType')\n  }\n\n  /**\n   * Cache the response into our storage object.\n   * We clone the response so that we can drain the stream without making it\n   * unavailable to future handlers.\n   *\n   * @param {string} cacheKey Key under which to cache the data string. Bound in\n   * fetch override.\n   * @param {Storage} storage Object implementing Storage interface to store cached data\n   * (text or json exclusively) in. Bound in fetch override.\n   * @param {Number} hourstl Number of hours this value shoud remain in the cache.\n   * Bound in fetch override.\n   * @param {Response} response\n   */\n  function cacheResponse(cacheKey, storage, hourstl, response) {\n    var cres = response.clone(),\n      dataType = (response.headers.get('Content-Type') || 'text/plain').toLowerCase()\n\n    cres.text().then((text) => {\n      try {\n        storage.setItem(cacheKey, text)\n        storage.setItem(cacheKey + 'cachettl', +new Date() + 1000 * 60 * 60 * hourstl)\n        storage.setItem(cacheKey + 'dataType', dataType)\n      } catch (e) {\n        // Remove any incomplete data that may have been saved before the exception was caught\n        removeFromStorage(storage, cacheKey)\n        console.log('Cache Error: ' + e, cacheKey, text)\n      }\n    })\n\n    return response\n  }\n\n  /**\n   * Create a new response containing the cached value, and return a promise\n   * that resolves with this response.\n   *\n   * @param value\n   * @param dataType\n   * @returns {Promise}\n   */\n  function provideResponse(value, dataType) {\n    var response = new Response(\n      value,\n      {\n        status: 200,\n        statusText: 'success',\n        headers: {\n          'Content-Type': dataType\n        }\n      }\n    )\n\n    return new Promise(function (resolve, reject) {\n      resolve(response)\n    })\n  }\n\n  /**\n   * Override fetch on the global context, so that we can intercept\n   * fetch calls and respond with locally cached content, if available.\n   * New parameters available on the call to fetch:\n   * localCache   : true // required - either a boolean (if true, localStorage is used,\n   * if false request is not cached or returned from cache), or an object implementing the\n   * Storage interface, in which case that object is used instead.\n   * cacheTTL     : 5, // optional, cache time in hours, default is 5. Use float numbers for\n   * values less than a full hour (e.g. 0.5 for 1/2 hour).\n   * cacheKey     : 'post', // optional - key under which cached string will be stored.\n   * isCacheValid : function  // optional - return true for valid, false for invalid.\n   */\n  self.fetch = function (url, settings) {\n    var storage = getStorage(settings.localCache),\n      hourstl = settings.cacheTTL || 5,\n      cacheKey = genCacheKey(url, settings),\n      cacheValid = settings.isCacheValid,\n      ttl,\n      value,\n      dataType\n\n    if (!storage) return fetch(url, settings)\n\n    ttl = storage.getItem(cacheKey + 'cachettl')\n\n    if (cacheValid && typeof cacheValid === 'function' && !cacheValid()) {\n      removeFromStorage(storage, cacheKey)\n      ttl = 0\n    }\n\n    if (ttl && ttl < +new Date()) {\n      removeFromStorage(storage, cacheKey)\n    }\n\n    value = storage.getItem(cacheKey)\n\n    if (!value) {\n      /* If not cached, we'll make the request and add a then block to the resulting promise,\n           in which we'll cache the result. */\n      return fetch(url, settings).then(cacheResponse.bind(null, cacheKey, storage, hourstl))\n    }\n\n    /* Value is cached, so we'll simply create and respond with a promise of our own,\n       and provide a response object. */\n    dataType = storage.getItem(cacheKey + 'dataType') || 'text/plain'\n    return provideResponse(value, dataType)\n  };\n})(self.fetch)\n\nfunction offScene () {\n  __class('map_wrapper')[0].style.display = 'block'\n}\n\nfunction initScene (forced) {\n  if (_isMobile) {\n    console.log('not compatible with smartphones.')\n    return\n  }\n  if (window.todayWeather) {\n    __class('map_wrapper')[0].style.display = 'none'\n    let done = false\n    if (forced && forced === 'rain') {\n      done = initRainScene()\n    }\n    if (forced && forced === 'sun') {\n      done = initSunScene()\n    }\n    if (!done) {\n      initRainScene()\n    }\n  }\n}\n","const lang = require('../lang/index')\n\nfunction _weekdaysLangs(language) {\n  switch (language) {\n    case 'ar':\n      return lang.ar.weekdays\n    case 'en':\n      return lang.en.weekdays\n    case 'fr':\n      return lang.fr.weekdays\n    default:\n      throw new Error('Language mapping error in _weekdayNames with language=', language)\n  }\n}\n\nfunction _aqiLangs(language) {\n  switch (language) {\n    case 'ar':\n      return lang.ar.aqi\n    case 'en':\n      return lang.en.aqi\n    case 'fr':\n      return lang.fr.aqi\n    default:\n      throw new Error('Language mapping error in _aqiInterpretation with language=', language)\n  }\n}\n\nfunction _picturesLangs(language) {\n  let success, fail\n  switch (language) {\n    case 'ar':\n      success = lang.ar.pictures.success\n      fail = lang.ar.pictures.fail\n      return [success, fail]\n    case 'en':\n      success = lang.en.pictures.success\n      fail = lang.en.pictures.fail\n      return [success, fail]\n    case 'fr':\n      success = lang.fr.pictures.success\n      fail = lang.fr.pictures.fail\n      return [success, fail]\n    default:\n      throw new Error('Language mapping error in _picturesLangs with language=', language)\n  }\n}\n","class AqiCard {\n  constructor (language, aqi, today, co, no, no2) {\n    const theme = {\n      1: '#4C5273',\n      2: '#F2E96B',\n      3: '#F2CA50',\n      4: '#F2A03D',\n      5: '#A67041'\n    }\n    this.style = 'background-color: ' + theme[aqi]\n    this.aqiInterpretation = _aqiLangs(language)\n    this.aqi = aqi\n    const d = new Date(0)\n    d.setUTCSeconds(today)\n    this.ISODate = d.toISOString().slice(5, 10)\n    this.dayName = _weekdaysLangs(language)[d.getDay()]\n    this.co = co\n    this.no = no\n    this.no2 = no2\n  }\n\n  html () {\n    let coo = 1\n    const showClass = _isMobile ? '' : 'show'\n    const collapseIcon = '<i class=\"bi bi-arrows-collapse\"></i>'\n    return (`\n        <div class=\"col-md-3\" style=\"margin-top:20px;\">\n            <div class=\"card\" style=\"${this.style}\">\n                <h4 class=\"card-title text-center\" data-toggle=\"collapse\" href=\"#collapseId20\" role=\"button\" aria-expanded=\"false\">${collapseIcon}${this.aqiInterpretation[this.aqi]}</h4>\n                <table style=\"width:100%\">\n                    <tr>\n                        <th style= 'background-color: #4C5273; font-size: xx-small'>${this.aqiInterpretation[coo++].split(':')[1].trim()}</th>\n                        <th style= 'background-color: #F2E96B; font-size: xx-small'>${this.aqiInterpretation[coo++].split(':')[1].trim()}</th>\n                        <th style= 'background-color: #F2CA50; font-size: xx-small'>${this.aqiInterpretation[coo++].split(':')[1].trim()}</th>\n                        <th style= 'background-color: #F2A03D; font-size: xx-small'>${this.aqiInterpretation[coo++].split(':')[1].trim()}</th>\n                        <th style= 'background-color: #A67041; font-size: xx-small'>${this.aqiInterpretation[coo++].split(':')[1].trim()}</th>\n                    </tr>\n                </table>\n                <div class=\"card-body\">\n                    <div class=\"collapse\" id=\"collapseId20\">\n                        <h5 class=\"card-title text-center\">${this.dayName}\\n${this.ISODate}</h5>\n                        <p class=\"card-text text-center\">CO: ${this.co} <br />NO: ${this.no}<br />NO2: ${this.no2}</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    `)\n  }\n}\n\nclass TemperatureCard {\n  constructor (language, period, maxTemp, minTemp, currentMarked, co) {\n    this.period = period\n    this.maxTemp = maxTemp\n    this.minTemp = minTemp\n    this.currentMarked = currentMarked\n    const d = new Date(0)\n    d.setUTCSeconds(period.dt)\n    this.ISODate = d.toISOString().slice(5, 10)\n    this.dayName = _weekdaysLangs(language)[d.getDay()]\n    this.iconSrc = `https://openweathermap.org/img/wn/${period.weather[0].icon || 'na'}@4x.png`\n    this.maxTempF = period.temp.max || 'N/A'\n    this.minTempF = period.temp.min || 'N/A'\n    const s = period.weather[0].description || 'N/A'\n    this.description = s.charAt(0).toUpperCase() + s.slice(1)\n    this.sunrise = new Date(period.sunrise * 1000).toLocaleTimeString('en-GB').slice(0, 5)\n    this.sunset = new Date(period.sunset * 1000).toLocaleTimeString('en-GB').slice(0, 5)\n    this.humidity = period.humidity\n    this.pressure = period.pressure\n    this.wind_speed = period.wind_speed\n    this.co = co\n  }\n\n  getHueColors () {\n    const hueMax = (1.0 - (this.maxTempF / this.maxTemp)) * 240\n    const hueMin = (1.0 - (this.minTempF / this.maxTemp)) * 240\n    const hueColors = `; background: linear-gradient(70deg, hsl( ${hueMin} , 90%, 80%) 40%, hsl( ${hueMax} , 90%, 80%) 40%)`\n    return hueColors\n  }\n\n  getCurrentMarkedId () {\n    const currentMarkedId = 'city-' + this.currentMarked.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '').replace(' ', '-').toLowerCase()\n    return `checkId${currentMarkedId}`\n  }\n\n  getColorScaleHeads () {\n    const range = Array.range(this.minTemp, this.maxTemp, 0.5, 1)\n    const stepMin = range.filter(n => { return this.minTempF > n }).length\n    const stepMax = range.filter(n => { return this.maxTempF > n }).length\n    const colorScale = range.map(step => { return `hsl( ${((1.0 - (step / this.maxTemp)) * 240)} , 90%, 80%)` })\n    const heads = colorScale.map((color, idx) => {\n      if (stepMin === idx) { return `<th style= 'background-color: ${color}; font-size: xx-small'>&nbsp;ᐁ</th>` }\n      else if (stepMax === idx) { return `<th style= 'background-color: ${color}; font-size: xx-small'>&nbsp;ᐃ</th>` }\n      else { return `<th style= 'background-color: ${color}; font-size: xx-small'>&nbsp;</th>` }\n    }).join('')\n    return heads\n  }\n\n  html () {\n    const showClass = _isMobile ? '' : 'show'\n    const collapseIcon = _isMobile ? '<i class=\"bi bi-arrows-collapse\"></i>' : ''\n    let autoDragBtn = _isMobile ? `<button class=\"btn-sm btn-light\" id=\"${this.getCurrentMarkedId()}-${this.co}-autodrag\" onclick=\"autoDrag(this.id)\"><i class=\"bi bi-binoculars\"></i></button>` : ''\n    return (`\n      <div class=\"col-md-3\" id=\"${this.getCurrentMarkedId()}-${this.co}\" style=\"margin-top:20px;\" draggable=\"true\" ondragstart=\"drag(event)\">\n          <div class=\"card\" style=\"${this.getHueColors()}\">\n              <table style=\"width:100%\">\n                  <tr>${this.getColorScaleHeads()}</tr>\n              </table>\n              <h4 class=\"card-title text-center\" data-toggle=\"collapse\" href=\"#collapseId${this.co}\" role=\"button\" aria-expanded=\"false\">${collapseIcon}${this.dayName}\\n${this.ISODate}</h4>\n              <img class=\"card-img mx-auto d-block\" style=\"max-width: 40%; margin:-10% 0px -10% 0px;\" src=\"${this.iconSrc}\">\n              <h5 class=\"card-title text-center\" style=\"margin:0\">${this.description}</h5>\n              <div class=\"card-body\">\n                  <div class=\"collapse ${showClass}\" id=\"collapseId${this.co}\">\n                      <p class=\"card-text text-center\">▼ Low: ${this.minTempF} &nbsp;|&nbsp; ▲ High: ${this.maxTempF}</p>\n                      <div id=\"weatherinfo\">\n                      <p><img class=\"icon\" src=\"./img/sunrise.svg\"> ${this.sunrise}</p>\n                      <p><img class=\"icon\" src=\"./img/sunset.svg\"> ${this.sunset}</p>\n                      <p><img class=\"icon\" src=\"./img/humidity.svg\"> ${this.humidity}</p>\n                      <p><img class=\"icon\" src=\"./img/pressure.svg\"> ${this.pressure}</p>\n                      <p><img class=\"icon\" src=\"./img/wind.svg\"> ${this.wind_speed}</p>\n                  </div>\n                  </div>\n              </div>\n          </div>\n          ${autoDragBtn}\n      </div>\n    `)\n  }\n}\n\nfunction _adsHolder(company) {\n  switch (company) {\n    case 'Google':\n      return (`\n                <div class=\"col-md-3\" style=\"margin-top:20px;\">\n                    <div class=\"card\" style=\"background-color: red;\">\n                        <div class=\"card-body\">\n                            <p>Ads go here</p>\n                        </div>\n                    </div>\n                </div>\n                `)\n      break\n    default:\n      break\n  }\n}\n","// Dangling variables: 'accessibility' <==> 'GMap'\n// __currentSpokenCity, __currentSpokenForecast\n\n// JUST CALLED THROUGH ACCESSIBILITY !! otherwise, it would mess up all things !!\n\nlet __currentSpokenCity\nlet paragraph\nlet __currentSpokenForecast\n\nfunction searchPlace () {\n  const autocompleteService = new google.maps.places.AutocompleteService()\n  const placesService = new google.maps.places.PlacesService(map)\n  if (!__currentSpokenCity) {\n    return\n  }\n  const fetchSuggestions = function (predictions, status) {\n    const fetchPlaceDetails = function (placeResults, status) {\n      if (status !== google.maps.places.PlacesServiceStatus.OK) {\n        speak('I am sorry, there was an error final results')\n        return\n      }\n      // this will fill __currentSpokenForecast with a transcript for Weather forecast\n      nearbyRequest(placeResults)\n      setTimeout(function () {\n        speak(__currentSpokenForecast)\n      }, 3000)\n    }\n    if (status !== google.maps.places.PlacesServiceStatus.OK) {\n      speak('I am sorry, I could not find any city for ' + __currentSpokenCity)\n      return\n    }\n    speak('I am now looking for ' + predictions[0].terms[0].value)\n    placesService.getDetails({ placeId: predictions[0].place_id }, fetchPlaceDetails)\n  }\n  // service.getQueryPredictions({ input: __currentSpokenCity }, fetchSuggestions)\n  autocompleteService.getPlacePredictions({ input: __currentSpokenCity, types: ['(cities)']/*, componentRestrictions: { country: 'fr' }*/ }, fetchSuggestions)\n}\n\nvar synth\nvar SpeechRecognition\nvar recognition\n\nfunction speak (paragraph) {\n  if (synth.speaking) {\n    console.error('speechSynthesis.speaking')\n    return\n  }\n  const text = new SpeechSynthesisUtterance(paragraph)\n  text.lang = 'en-US'\n  text.onend = function (event) {\n    console.log('SpeechSynthesisUtterance.onend')\n  }\n  text.onerror = function (event) {\n    console.error('SpeechSynthesisUtterance.onerror')\n  }\n  synth.speak(text)\n}\n\nfunction _fireAccessFunctions (first, justRefresh) {\n  if (!first) {\n    if (recognition)\n      recognition = undefined\n    return\n  }\n  if (typeof (webkitSpeechRecognition) === 'undefined') {\n    console.log('browser does not support speech recognition')\n    return\n  }\n  synth = window.speechSynthesis\n  SpeechRecognition = SpeechRecognition || webkitSpeechRecognition\n  recognition = new SpeechRecognition()\n  recognition.continuous = false\n  recognition.lang = 'en-US'\n  recognition.interimResults = false\n  recognition.maxAlternatives = 1\n\n  document.body.onkeyup = function (e) {\n    if (recognition && e.key === ' ') {\n      recognition.start()\n      console.log('Ready to receive a new city command.')\n    }\n    if (synth.speaking && e.key === 'Control') {\n      synth.cancel()\n      console.log('You shut me up.')\n    }\n  }\n  recognition.onresult = function (event) {\n    const city = event.results[0][0].transcript\n    console.log('Result received: ' + city + '.')\n    const confidence = event.results[0][0].confidence\n    console.log('Confidence: ' + confidence)\n    if (confidence > 0.9) {\n      paragraph = 'Is it ' + city + '?'\n      speak(paragraph)\n      __currentSpokenCity = city\n      searchPlace()\n    }\n    else {\n      paragraph = 'I am sorry, could you say that again ?'\n      speak(paragraph)\n    }\n  }\n  recognition.onspeechend = function () {\n    recognition.stop()\n  }\n  recognition.onnomatch = function (event) {\n    console.log(\"I didn't recognise that city.\")\n  }\n  recognition.onerror = function (event) {\n    console.log('Error occurred in recognition: ' + event.error)\n  }\n  if (!justRefresh) {\n    paragraph = 'Hello, Weather Venue is accessible through speech although not fully garanteed. I will assist you on how to look for a city weather forecast. Whenever you want to look for a city, tap spacebar then tell using microphone the name of the city. If you want to interrupt me tap control.'\n    speak(paragraph)\n  }\n}\n\nfunction _initAccessibility(language) {\n  // Accessibility is supported only for English\n  if (language === 'en') {\n    // accessibility\n    const choiceViaLS = localStorage.getItem('accessibilitySwitch') !== null && localStorage.getItem('accessibilitySwitch') === 'true'\n    __id('accessibilitySwitch').addEventListener('click', function () {\n      console.log('accessibilitySwitch clicked ')\n      const isChecked = __id('accessibilitySwitch').checked\n      const value = isChecked ? 1 : 0\n      value ? localStorage.setItem('accessibilitySwitch', 'true') : localStorage.removeItem('accessibilitySwitch')\n      const choiveViaTog = localStorage.getItem('accessibilitySwitch') !== null && localStorage.getItem('accessibilitySwitch') === 'true'\n      if (choiveViaTog) {\n        _fireAccessFunctions(true, false)\n      }else{\n        _fireAccessFunctions(false, false)\n      }\n    })\n    if (choiceViaLS) {\n      _fireAccessFunctions(true, true)\n    }\n  }\n}\n","// ONLY EXECUTE THE WHOLE SCRIPT ON index PAGES!!\n// __id('date') is a test to assure that 'GMap.js' is called only in index page. Because it is also included in all other pages with no need in 'after_body.ejs'\nconst today = new Date().toDateString()\n__id('date').innerHTML = today\n\n// Global variables\n// 'js_variables.js' ==> 'GMap.js'\n// _myStorage, _styles, _isMobile, _autocompleteOptions\n// _styleItDark(), _styleItWhite(), _showLoading(), _hideLoading(),\n// _setWithExpiry(), _getWithExpiry()\n\n// 'lang_mappings.js' and 'html_holders.js' ==> 'GMap.js'\n// AqiCard, TemperatureCard, _weekdaysLangs(), _aqiLangs(), _picturesLangs()\n\n// 'accessibility.js' ==> 'Gmap.js'\n// _fireAccessFunctions()\n\n// CurrentList is a class holder for 'data' object which is the server response,\n// containing a list of features, weather, pollution. It should assure a safe instanciation and access\nclass CurrentList {\n  constructor (data) {\n    if (!this.isFeatures(data) || !this.isWeather(data)) {\n      return { isValid: false }\n    }\n    this.currentList = data\n    this.weather = data.weather\n    this.pollution = data.pollution\n    this.location = data.features[0].properties.name\n    this.dailies = data.weather[0].daily\n    this.coordinates = data.features[0].geometry.coordinates\n    this.isValid = true\n  }\n\n  isFeatures (data) {\n    return data && data.features && data.features.length\n  }\n\n  isWeather (data) {\n    return data && data.weather && data.weather.length\n  }\n}\n\n// currentObj is an instance of CurrentList\n// map, currentMarked, markers, autocomplete, language, and directions are all global variables holding one value,\n// that could change with a new city search or other user interractions\nlet currObj = { isValid: false }\nlet currentMarked\nlet map\nlet markers = []\nlet autocomplete\nlet language = 'en'\nlet directions = { start_location: undefined, end_location: undefined }\n\n// callbacks control\nlet last = new Date().getTime()\nlet first = true\nlet center = { lat: -33.8688, lng: 151.2195 }\n\n// sets default geolocation for center based on originating page: {index.html, index_ar.html}\nfunction refreshCenter () {\n  const params = _getScriptParams(['lang', 'centerLocation'])\n  language = params[0]\n  const centerLocation = params[1]\n  switch (centerLocation) {\n    case 'algiers':\n      center = { lat: 36.75, lng: 3.05 }\n      break\n    case 'paris':\n      center = { lat: 48.85, lng: 2.35 }\n      break\n    case 'london':\n      center = { lat: 51.50, lng: 0.12 }\n      break\n    default:\n      break\n  }\n  // When initMap is called for a second time, choose the earlier center not to move the map center away in the globe\n  if (currObj.isValid) {\n    center = {\n      lat: currObj.coordinates[1],\n      lng: currObj.coordinates[0]\n    }\n  }\n}\n\n// MAIN\n// Instanciate a map. For first visit, there is no search yet and as a result no center, thus we take passsed parameters (language / centerLocation) and decide center\n// Refreshes DOM too after response, this is why initMap calls nearbyRequest and nearbyRequest calls initMap back\n/**\n * refreshCenter()\n * new google.maps.Map()\n * configUIControls()\n * _initAccessibility()\n * map.data.addGeoJson()\n * showAlertsList()\n * populateHeatMap()\n * renderForecastDays()\n * renderPollution()\n * getPicture()\n * nearbyRequest()\n */\n\nfunction initMap () {\n  refreshCenter()\n  // Instantiate the map or clean it if it already exists\n  if (!map) {\n    map = new google.maps.Map(__id('map'), {\n      center: center,\n      zoom: 10,\n      rotateControl: false,\n      mapTypeControl: false,\n      streetViewControl: false\n    })\n  } else {\n    // initMap() being called a second time, clear earlier data\n    map.data.forEach(feature => map.data.remove(feature))\n    google.maps.event.trigger(map, 'resize')\n  }\n  configUIControls()\n  _initAccessibility(language)\n  // Populate current list of cities nearby on the map\n  if (currObj.isValid) {\n    map.data.addGeoJson(currObj.currentList)\n    clearMarkers()\n    getMarkers()\n    showMarkers()\n    map.data.setStyle({\n      strokeColor: 'blue'\n    })\n    // Fit map size to its markers\n    const bounds = new google.maps.LatLngBounds()\n    map.data.forEach(function (feature) {\n      feature.getGeometry().forEachLatLng(function (latlng) {\n        bounds.extend(latlng)\n      })\n    })\n    map.fitBounds(bounds)\n    map.setCenter(center)\n    map.setZoom(11)\n    // Show alerts panel\n    showAlertsList(currObj)\n    populateHeatMap(0)\n  }\n\n  // Create the infowindow for the center marker\n  const infowindow = new google.maps.InfoWindow()\n  const infowindowContent = __id('infowindow-content')\n  const infowindowContentPrime = infowindowContent.cloneNode(true)\n  infowindow.setContent(infowindowContent)\n  const marker = new google.maps.Marker({\n    map: map,\n    animation: google.maps.Animation.DROP\n  })\n\n  let latestClicked = ''\n  // marker onclick: populate the forecast data on the HTML cards (renderForecastDays)\n  if (markers && markers.length > 0) {\n    markers.forEach(marker => {\n      marker.addListener('click', () => {\n        // console.log(marker.title)\n        currentMarked = marker.title\n        // Do not render again when the same marker is clicked !\n        if (latestClicked !== marker.title) {\n          latestClicked = marker.title\n        }\n        infowindowContentPrime.getElementsByClassName('title')[0].innerHTML = marker.title\n        infowindow.close()\n        infowindow.setContent(infowindowContentPrime)\n        infowindow.open(map, marker)\n        toggleBounce()\n        if (currObj.isValid) {\n          __id('location').innerHTML = marker.title // currObj.location;\n          const cityWeather = currObj.weather.find(item => item.cityName === marker.title)\n          const cityPollution = currObj.pollution.find(item => item.cityName === marker.title)\n          renderForecastDays(cityWeather.daily)\n          renderPollution(cityPollution)\n        }\n      })\n      marker.addListener('mousedown', (e) => {\n        console.log('mousedown')\n      })\n      marker.addListener('rightclick', (e) => {\n        configURLsControls(marker)\n      })\n      function toggleBounce () {\n        if (marker.getAnimation() !== null) {\n          marker.setAnimation(null)\n        } else {\n          markers.forEach(marker_ => {\n            marker_.setAnimation(null)\n          })\n          marker.setAnimation(google.maps.Animation.BOUNCE)\n        }\n      }\n    })\n  }\n\n  // Define behaviour for possible second searches\n  autocomplete.addListener('place_changed', () => {\n    if (!first && ((new Date().getTime() - last) < 200)) {\n      console.log('quick re-call, ignore.')\n      return\n    }\n    first = false\n    last = new Date().getTime()\n    infowindow.close()\n    const place = autocomplete.getPlace()\n    if (!place.geometry) return\n    if (place.geometry.viewport) {\n      map.fitBounds(place.geometry.viewport)\n    } else {\n      map.setCenter(place.geometry.location)\n      map.setZoom(11)\n    }\n\n    // Set the position of the marker using the place ID and location.\n    marker.setPlace({\n      placeId: place.place_id,\n      location: place.geometry.location\n    })\n    marker.setVisible(false)\n    infowindowContent.children.namedItem('place-name').textContent = place.name\n    // infowindowContent.children.namedItem(\"place-id\").textContent =\n    //     place.place_id;\n    infowindowContent.children.namedItem('place-address').textContent =\n      place.formatted_address\n    // infowindow.open(map, marker);\n    currentMarked = place.name\n    getPicture(place.name)\n    nearbyRequest(place)\n    refreshDzBorder()\n    showAlertsList(currObj)\n  })\n  // Populate current alerts of all cities on a floating HTML panel on the map\n  showAlertsList(currObj)\n}\n// When browser doesn't support Geolocation\nfunction handleLocationError (browserHasGeolocation, infoWindow, pos) {\n  infoWindow.setPosition(pos)\n  infoWindow.setContent(\n    browserHasGeolocation\n      ? 'Error: The Geolocation service failed.'\n      : \"Error: Your browser doesn't support geolocation.\"\n  )\n  infoWindow.open(map)\n}\n\n// Instanciate new UI controles for DOM page or Google map. Configure UI controles or retrieve present UI controles when they exist.\n/**\n * darkSwitch\n * heatmap slider\n * new google.maps.places.Autocomplete\n * panButton and geolocation\n */\nfunction configUIControls () {\n  // First time visit: style map night or regular based on earlier preferences\n  const darkThemeSelected = localStorage.getItem('darkSwitch') !== null && localStorage.getItem('darkSwitch') === 'dark'\n  darkThemeSelected ? _styleItDark() : _styleItWhite()\n  // Define on toggle behaviour.\n  google.maps.event.addDomListener(__id('darkSwitch'), 'click', function () {\n    const toggle = localStorage.getItem('darkSwitch') !== null && localStorage.getItem('darkSwitch') === 'dark'\n    toggle ? _styleItWhite() : _styleItDark()\n  })\n\n  // Slider\n  const slider = __id('formControlRange')\n  const sliderForm = __id('formControlRange0')\n  let moving\n  if (!_isMobile) {\n    map.controls[google.maps.ControlPosition.TOP_LEFT].clear()\n    map.controls[google.maps.ControlPosition.TOP_LEFT].push(sliderForm)\n  }\n  slider.oninput = function () {\n    $('#rangeval').html(`Day ${slider.value}`)\n    moving = populateHeatMap(slider.value - 1)\n    if (!moving) {\n      slider.value = 1\n      $('#rangeval').html('Day 1')\n    }\n  }\n\n  // Create the autocompletion search bar if does not exist already\n  let input = __id('pac-input')\n  if (input == null) {\n    const div = document.createElement('INPUT')\n    div.id = 'pac-input'\n    div.className = 'controls'\n    div.type = 'text'\n    div.placeholder = 'Enter a location'\n    document.body.appendChild(div)\n    input = __id('pac-input')\n  }\n  if (!autocomplete) {\n    autocomplete = new google.maps.places.Autocomplete(input, _autocompleteOptions)\n    map.controls[google.maps.ControlPosition.TOP_CENTER].clear()\n    map.controls[google.maps.ControlPosition.TOP_CENTER].push(input)\n    autocomplete.bindTo('bounds', map)\n    // Specify just the place data fields that you need.\n    autocomplete.setFields(['place_id', 'geometry', 'name'])\n  }\n\n  // Geolocation\n  currentMarked = 'geolocated'\n  // Create Geolocation button if it does not exist\n  const panButton = __class('custom-map-control-button')[0]\n  if (panButton) {\n    return\n  }\n\n  const infoWindow = new google.maps.InfoWindow()\n  const locationButton = document.createElement('button')\n  locationButton.textContent = 'Go to Current Location'\n  locationButton.classList.add('custom-map-control-button')\n  locationButton.setAttribute('type', 'submit')\n  map.controls[google.maps.ControlPosition.TOP_RIGHT].clear()\n  map.controls[google.maps.ControlPosition.TOP_RIGHT].push(locationButton)\n  locationButton.addEventListener('click', () => {\n    // Try HTML5 geolocation.\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const pos = {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          }\n          infoWindow.setPosition(pos)\n          infoWindow.setContent('Location found.')\n          infoWindow.open(map)\n          map.setCenter(pos)\n          pos.name = 'Current place'\n          nearbyTriggeredRequest(pos)\n          __id('imgGrid').innerHTML = ''\n          showAlertsList(currObj)\n        },\n        () => {\n          handleLocationError(true, infoWindow, map.getCenter())\n        }\n      )\n    } else {\n      // Browser doesn't support Geolocation\n      handleLocationError(false, infoWindow, map.getCenter())\n    }\n  })\n}\n\n// Configure Google map URLs based on user interactions (successive right clicks on markers)\n// Called when a marker is right clicked\nfunction configURLsControls (marker) {\n  // Change marker icon between normal and black states using marker.setIcon\n  const newDest = `${marker.position.lat()},${marker.position.lng()}`\n  let controlUI\n  if (!directions.start_location) {\n    directions.start_location = newDest\n    marker.setIcon('https://www.google.com/mapfiles/marker_black.png')\n    return\n  }\n  if (!directions.end_location && (directions.start_location !== newDest)) {\n    directions.end_location = newDest\n    const link = `https://www.google.com/maps/dir/?api=1&origin=${directions.start_location}&destination=${directions.end_location}&travelmode=driving`\n    if (!__id('URL')) {\n      controlUI = document.createElement('div')\n      controlUI.setAttribute('id', 'URL')\n    } else {\n      controlUI = __id('URL')\n      controlUI.innerHTML = ''\n    }\n    const a = document.createElement('a')\n    const linkText = document.createTextNode('🔗Google Map\\'s directions')\n    a.appendChild(linkText)\n    a.title = 'Google Map'\n    a.href = link\n    a.target = '_blank'\n    a.style.cssText = 'background-color: #2a2a3c; color: #fff'\n    controlUI.appendChild(a)\n    map.controls[google.maps.ControlPosition.BOTTOM_CENTER].clear()\n    map.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(controlUI)\n    marker.setIcon('https://www.google.com/mapfiles/marker_black.png')\n    return\n  }\n  // Refresh DOM for all markers after 'marker.setIcon' has been called on some markers\n  markers.forEach(marker_ => {\n    // console.log(marker_.iconSrc)\n    marker_.setIcon(marker_.iconSrc)\n  })\n  // Create an URL in map's bottom\n  controlUI = __id('URL')\n  controlUI.innerHTML = ''\n  map.controls[google.maps.ControlPosition.BOTTOM_CENTER].clear()\n  map.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(controlUI)\n  directions = { start_location: undefined, end_location: undefined }\n}\n\n// Called once the user search for a city, look for weather cached data for today (local user time) for the city,\n// If not found, create an AJAX request for it\n/**\n * _showLoading(), _hideLoading()\n * _getWithExpiry(), _setWithExpiry()\n * \"nearby/\" is the main API in back-end\n * renderForecastDays()\n * initMap()\n */\nfunction nearbyRequest (place) {\n  _showLoading() // Block page while loading\n  const requestObject = JSON.stringify({\n    lat: place.geometry.location.lat(),\n    lng: place.geometry.location.lng(),\n    cityname: place.name,\n    language: language\n  })\n  fetch('nearby/' + requestObject, { localCache: true, cacheTTL: 5 }).then(function (response) {\n    return response.json()\n  }).then(function (data) {\n    currObj = new CurrentList(data.data)\n    __id('location').innerHTML = currObj.location\n    renderForecastDays(currObj.dailies)\n    initMap()\n    populateHeatMap(0)\n    _hideLoading() // Unblock page\n  })\n}\n\n// Same as nearbyRequest()\nfunction nearbyTriggeredRequest (place) {\n  _showLoading() // Block page while loading\n  const requestObject = JSON.stringify({\n    lat: place.lat,\n    lng: place.lng,\n    cityname: place.name,\n    language: language\n  })\n  fetch('nearby/' + requestObject, { localCache: true, cacheTTL: 5 }).then(function (response) {\n    return response.json()\n  }).then(function (data) {\n    currObj = new CurrentList(data.data)\n    __id('location').innerHTML = currObj.location\n    renderForecastDays(currObj.dailies)\n    initMap()\n    _hideLoading() // Unblock page\n  })\n}\n\n// Create an HTML panel containing weather alerts for all current cities\nfunction showAlertsList (currObj) {\n  if (!currObj.isValid) {\n    return\n  }\n  if (_isMobile) {\n    return\n  }\n  const cityNames = currObj.weather.map(elem => { return elem.cityName })\n  const alerts = currObj.weather.map((elem, idx) => { return elem.alerts ? { city: cityNames[idx], alert: elem.alerts[0] } : undefined }).filter(elem => { return elem })\n\n  let panel = document.createElement('ul')\n  // If the panel already exists, use it. Else, create it and add to the page.\n  if (__id('panel')) {\n    panel = __id('panel')\n    panel.style = 'overflow-y: scroll;'\n    // If panel is already open, close it\n    if (panel.classList.contains('open')) {\n      panel.classList.remove('open')\n    }\n  } else {\n    panel.setAttribute('id', 'panel')\n    const body = document.body\n    body.insertBefore(panel, body.childNodes[0])\n  }\n  map.controls[google.maps.ControlPosition.BOTTOM_LEFT].clear()\n  map.controls[google.maps.ControlPosition.BOTTOM_LEFT].push(panel)\n\n  // Clear the previous details\n  while (panel.lastChild) {\n    panel.removeChild(panel.lastChild)\n  }\n\n  if (!alerts || alerts.length === 0) {\n    panel.style.display = 'none'\n    return\n  }\n  panel.style.display = 'block'\n  alerts.forEach((alert) => {\n    // Add alert details with text formatting\n    const name = document.createElement('li')\n    name.classList.add('alert')\n    name.textContent = alert.city\n    panel.appendChild(name)\n    const alertContent = document.createElement('p')\n    alertContent.classList.add('alertContent')\n    alertContent.textContent = alert.alert.event\n    panel.appendChild(alertContent)\n  })\n  // Open the panel\n  panel.classList.add('open')\n}\n\n/**\n * new HeatmapOverlay()\n * map getScale() on weather\n */\nlet heatmap\nlet heatMapData\nlet temp\nconst getScale = (min, max, value) => Math.floor(5 * (value - min) / (max - min))\nfunction populateHeatMap (day) {\n  if (!currObj.isValid) {\n    return false\n  }\n  let temps = currObj.weather.map(a => { return a.daily[day].temp.min })\n  const tempsMax = Math.max(...temps)\n  const tempsMin = Math.min(...temps)\n  temps = temps.map(a => { return getScale(tempsMin, tempsMax, a) })\n  temp = []\n  temp = currObj.weather.map((a, idx) => { return { location: new google.maps.LatLng(a.lat, a.lon), weight: temps[idx] } })\n  heatMapData = new google.maps.MVCArray(temp)\n  if (!heatmap) {\n    heatmap = new google.maps.visualization.HeatmapLayer({\n      data: heatMapData,\n      radius: 150,\n      opacity: 0.5\n    })\n    heatmap.setMap(map)\n  } else {\n    heatmap.set('data', heatMapData)\n    // heatmap.set('opacity', 0.5)\n    // heatmap.set('radius', 150)\n  }\n  return true\n}\n\nArray.range = function (from, to, step, prec) {\n  if (typeof from === 'number') {\n    const A = [from]\n    step = typeof step === 'number' ? Math.abs(step) : 1\n    if (!prec) {\n      prec = (from + step) % 1 ? String((from + step) % 1).length + 1 : 0\n    }\n    if (from > to) {\n      while (+(from -= step).toFixed(prec) >= to) A.push(+from.toFixed(prec))\n    } else {\n      while (+(from += step).toFixed(prec) <= to) A.push(+from.toFixed(prec))\n    }\n    return A\n  }\n}\n\n// Create and Update the HTML list of div cards holding a list of weather information for one city in a week\n// Fill __currentSpokenForecast with a transcript for Weather forecast\n// hueColors: calculated background color based on the current tempreture and all weather average\nlet lastIcon\nlet todayWeather\nfunction renderForecastDays (dailies) {\n  // console.log(\"renderForecastDays\");\n  // console.log(JSON.stringify(dailies));\n  dailies.sort(function (first, second) {\n    return second.dt - first.dt\n  })\n  const weekdayNames = _weekdaysLangs(language)\n  lastIcon = `url(https://openweathermap.org/img/wn/${dailies[dailies.length - 1].weather[0].icon || 'na'}.png)`\n  const choiceTheme = localStorage.getItem('themeSwitch') !== null && localStorage.getItem('themeSwitch') === 'true'\n  if (choiceTheme) {\n    document.body.style.backgroundImage = lastIcon\n    document.documentElement.style.backgroundImage = lastIcon\n  }\n  __id('forecast-items').innerHTML = ''\n  const maxTemp = Math.max(...dailies.map((item) => { return item.temp.max }))\n  const minTemp = Math.min(...dailies.map((item) => { return item.temp.min }))\n  dailies.forEach(function (period, co) {\n    const card = new TemperatureCard(language, period, maxTemp, minTemp, currentMarked, co)\n    __id('forecast-items').insertAdjacentHTML('afterbegin', card.html())\n  })\n  window.todayWeather = dailies[0].weather[0].description\n  // const minMaxBtn = '<div class=\"text-center\"><button type=\"button\" class=\"btn btn-light\" id=\"minmax\" onclick=\"minMax()\"><i class=\"bi bi-thermometer\"></i><i class=\"bi bi-thermometer-high\"></i></button></div>'\n  // __id('forecast-items').insertAdjacentHTML('beforebegin', minMaxBtn)\n\n  dailies.reverse()\n  let __currentSpokenForecast = 'Now, let’s see what the weather is like in ' + __currentSpokenCity + ': '\n  dailies.forEach(function (period, key) {\n    const toPrecision = x => Number.parseFloat(x).toPrecision(1)\n    const d = new Date(0)\n    d.setUTCSeconds(period.dt)\n    const dayName = weekdayNames[d.getDay()] // new Date(period.dateTimeISO).getDay()\n    const maxTempF = period.temp.max || 'N/A'\n    const minTempF = period.temp.min || 'N/A'\n    const description = period.weather[0].description || 'N/A'\n    // transcript\n    let chain = ''\n    switch (key) {\n      case 0:\n        chain = 'Today is '\n        break\n      case 1:\n        chain = 'Tomorrow is '\n        break\n      default:\n        chain = (dailies.length - 1 === key) ? 'Finally, on ' : 'On '\n        break\n    }\n    __currentSpokenForecast += `${chain} ${dayName}, ${d.toDateString().slice(4, 10)}, it feels like ${description} with a maximum temperature of ${toPrecision(maxTempF)}°C and a minimum of ${toPrecision(minTempF)}°. `\n  })\n}\n\n// Create and Update the HTML div card holding pollution information and scale for one city for today only\nfunction renderPollution (pollution) {\n  const aqi = pollution.list[0].main.aqi\n  const { co, no, no2 } = pollution.list[0].components\n  const today = pollution.list[0].dt\n  const card = new AqiCard(language, aqi, today, co, no, no2)\n  __id('forecast-items').insertAdjacentHTML('beforeend', card.html())\n}\n\n// #getMarkers, #setMapOnAll, #clearMarkers, #showMarkers are helpers to refresh markers.\n// Detach old features then attach new markers to map\nfunction getMarkers () {\n  if (!currObj.isValid) {\n    return\n  }\n  center = {\n    lat: currObj.coordinates[1],\n    lng: currObj.coordinates[0]\n  }\n  // const bounds = new google.maps.LatLngBounds()\n\n  let idx = 0\n  const COLORS = ['blue', 'purple', 'green', 'yellow', 'red']\n  const getColor = (min, max, value) => COLORS[Math.floor(COLORS.length * (value - min) / (max - min))]\n\n  const maxTemp = Math.max(...currObj.weather.map((item) => { return item.daily[0].temp.max }))\n  const minTemp = Math.min(...currObj.weather.map((item) => { return item.daily[0].temp.min }))\n  map.data.forEach(function (feature) {\n    // if (feature.getGeometry().getType() === 'Polygon') {\n    //     feature.getGeometry().forEachLatLng(function(latlng) {\n    //         bounds.extend(latlng);\n    //     });\n    // } else\n    if (feature.getGeometry().getType() === 'Point') {\n      const todayTempCeil = (currObj.weather[idx].daily[0].temp.max)\n      const todayTempFloor = (currObj.weather[idx++].daily[0].temp.min)\n      const todayTemp = (todayTempCeil + todayTempFloor) / 2\n      const LatLng = feature.getGeometry().get()\n      const marker = new google.maps.Marker({\n        position: LatLng,\n        map: map,\n        animation: google.maps.Animation.DROP,\n        title: feature.i ? feature.i.name : feature.name,\n        iconSrc: `https://maps.google.com/mapfiles/ms/icons/${getColor(minTemp, maxTemp, todayTemp)}-dot.png`\n      })\n      // console.log('minTemp', minTemp, 'maxTemp', maxTemp, 'todayTemp', todayTemp)\n      marker.setIcon(`https://maps.google.com/mapfiles/ms/icons/${getColor(minTemp, maxTemp, todayTemp)}-dot.png`)\n      markers.push(marker)\n      // remove previous markers from map.data\n      map.data.remove(feature)\n    }\n  })\n}\n\n// Sets the map on all markers in the array.\nfunction setMapOnAll (map) {\n  markers.forEach(marker => marker.setMap(map))\n}\n\n// Removes the markers from the map, but keeps them in the array.\nfunction clearMarkers () {\n  markers.forEach(marker => marker.setVisible(false))\n  setMapOnAll(null)\n  markers = []\n}\n\n// Shows any markers currently in the array.\nfunction showMarkers () {\n  markers.forEach(marker => marker.setVisible(true))\n  setMapOnAll(map)\n}\n\n// Get pictures for seached place\n/**\n * new google.maps.places.PlacesService\n * _myStorage.getItem(place), _myStorage.setItem(place, urls)\n * populate pictures on featured_pictures div\n */\nfunction getPicture (place) {\n  const [success, fail] = _picturesLangs(language)\n  __id('imgGrid').innerHTML = ''\n  let cache = _myStorage.getItem(place)\n  if (cache) {\n    cache = JSON.parse(cache)\n    for (let i = 0; i < cache.photos.length; i++) {\n      __id('imgGrid').innerHTML += '<div class=\"featured_pictures\"><img src=\"' + cache.photos[i] + '\" alt=\"' + cache.names[i] + '\" /></div>'\n    }\n    return\n  }\n  const service = new google.maps.places.PlacesService(map)\n  const request = {\n    location: map.getCenter(),\n    radius: '3000',\n    query: place,\n    type: ['park'] //, 'mosque', 'airport', 'amusement_park', 'art_gallery', 'casino', 'church', 'museum', 'park', 'synagogue', 'tourist_attraction', 'university']\n  }\n  let called = false\n  service.nearbySearch(request, callback)\n  // Checks that the PlacesServiceStatus is OK, and adds a marker\n  // using the place ID and location from the PlacesService.\n  function callback (results, status) {\n    if (called) {\n      return\n    }\n    called = true\n    __id('gallery').innerHTML = success(place)\n    if (status === google.maps.places.PlacesServiceStatus.OK) {\n      const photos = results.map(elem => { return elem.photos ? elem.photos[0].getUrl() : undefined }).filter(elem => { return elem })\n      const names = results.map(elem => { return elem.name })\n      if (!photos.length) {\n        __id('gallery').innerHTML = fail(place)\n        return\n      }\n      _myStorage.setItem(place, JSON.stringify({ photos: photos, names: names }))\n      for (let i = 0; i < photos.length; i++) {\n        __id('imgGrid').innerHTML += '<div class=\"featured_pictures\"><img src=\"' + photos[i] + '\" alt=\"' + names[i] + '\" /></div>'\n      }\n    } else {\n      __id('gallery').innerHTML = fail(place)\n    }\n  }\n}\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  setTimeout(function () {\n    const params = _getScriptParams(['lang', 'centerLocation'])\n    language = params[0]\n    const centerLocation = params[1]\n    const pos = {\n      lat: center.lat,\n      lng: center.lng\n    }\n    map.setCenter(pos)\n    pos.name = centerLocation.charAt(0).toUpperCase() + centerLocation.slice(1)\n    nearbyTriggeredRequest(pos)\n    __id('imgGrid').innerHTML = ''\n  }, 2000)\n}, false)\n\nlet borderData\nfunction refreshDzBorder () {\n  if (document.location.hash && document.location.hash === '#algeria') {\n    setTimeout(() => {\n      if (borderData) {\n        return\n      }\n      borderData = new google.maps.Data()\n      borderData.loadGeoJson(\n        '/data/dza.geojson'\n      )\n      borderData.setStyle({\n        fillColor: 'green',\n        fillOpacity: 0.1\n      })\n      borderData.setMap(map)\n    }, 5000)\n  }\n}\nrefreshDzBorder()\n"]}